/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"main": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./js/index.js","vendors~main"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./css/datepicker.css":
/*!****************************!*\
  !*** ./css/datepicker.css ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./css/datepicker.css?");

/***/ }),

/***/ "./css/simplePagination.css":
/*!**********************************!*\
  !*** ./css/simplePagination.css ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./css/simplePagination.css?");

/***/ }),

/***/ "./js/datepicker.js":
/*!**************************!*\
  !*** ./js/datepicker.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(jQuery) {\n;(function (window, $, undefined) { ;(function () {\n    var VERSION = '2.2.3',\n        pluginName = 'datepicker',\n        autoInitSelector = '.datepicker-here',\n        $body, $datepickersContainer,\n        containerBuilt = false,\n        baseTemplate = '' +\n            '<div class=\"datepicker\">' +\n            '<i class=\"datepicker--pointer\"></i>' +\n            '<nav class=\"datepicker--nav\"></nav>' +\n            '<div class=\"datepicker--content\"></div>' +\n            '</div>',\n        defaults = {\n            classes: '',\n            inline: false,\n            language: 'ru',\n            startDate: new Date(),\n            firstDay: '',\n            weekends: [6, 0],\n            dateFormat: '',\n            altField: '',\n            altFieldDateFormat: '@',\n            toggleSelected: true,\n            keyboardNav: true,\n\n            position: 'bottom left',\n            offset: 12,\n\n            view: 'days',\n            minView: 'days',\n\n            showOtherMonths: true,\n            selectOtherMonths: true,\n            moveToOtherMonthsOnSelect: true,\n\n            showOtherYears: true,\n            selectOtherYears: true,\n            moveToOtherYearsOnSelect: true,\n\n            minDate: '',\n            maxDate: '',\n            disableNavWhenOutOfRange: true,\n\n            multipleDates: false, // Boolean or Number\n            multipleDatesSeparator: ',',\n            range: false,\n\n            todayButton: false,\n            clearButton: false,\n            submitButton: false,\n\n            showEvent: 'focus',\n            autoClose: false,\n\n            // navigation\n            monthsField: 'monthsShort',\n            prevHtml: '<svg><path d=\"M 17,12 l -5,5 l 5,5\"></path></svg>',\n            nextHtml: '<svg><path d=\"M 14,12 l 5,5 l -5,5\"></path></svg>',\n            navTitles: {\n                days: 'MM, <i>yyyy</i>',\n                months: 'yyyy',\n                years: 'yyyy1 - yyyy2'\n            },\n\n            // timepicker\n            timepicker: false,\n            onlyTimepicker: false,\n            dateTimeSeparator: ' ',\n            timeFormat: '',\n            minHours: 0,\n            maxHours: 24,\n            minMinutes: 0,\n            maxMinutes: 59,\n            hoursStep: 1,\n            minutesStep: 1,\n\n            // events\n            onSelect: '',\n            onShow: '',\n            onHide: '',\n            onChangeMonth: '',\n            onChangeYear: '',\n            onChangeDecade: '',\n            onChangeView: '',\n            onRenderCell: ''\n        },\n        hotKeys = {\n            'ctrlRight': [17, 39],\n            'ctrlUp': [17, 38],\n            'ctrlLeft': [17, 37],\n            'ctrlDown': [17, 40],\n            'shiftRight': [16, 39],\n            'shiftUp': [16, 38],\n            'shiftLeft': [16, 37],\n            'shiftDown': [16, 40],\n            'altUp': [18, 38],\n            'altRight': [18, 39],\n            'altLeft': [18, 37],\n            'altDown': [18, 40],\n            'ctrlShiftUp': [16, 17, 38]\n        },\n        datepicker;\n\n    var Datepicker  = function (el, options) {\n        this.el = el;\n        this.$el = $(el);\n\n        this.opts = $.extend(true, {}, defaults, options, this.$el.data());\n\n        if ($body == undefined) {\n            $body = $('body');\n        }\n\n        if (!this.opts.startDate) {\n            this.opts.startDate = new Date();\n        }\n\n        if (this.el.nodeName == 'INPUT') {\n            this.elIsInput = true;\n        }\n\n        if (this.opts.altField) {\n            this.$altField = typeof this.opts.altField == 'string' ? $(this.opts.altField) : this.opts.altField;\n        }\n\n        this.inited = false;\n        this.visible = false;\n        this.silent = false; // Need to prevent unnecessary rendering\n\n        this.currentDate = this.opts.startDate;\n        this.currentView = this.opts.view;\n        this._createShortCuts();\n        this.selectedDates = [];\n        this.views = {};\n        this.keys = [];\n        this.minRange = '';\n        this.maxRange = '';\n        this._prevOnSelectValue = '';\n\n        this.init()\n    };\n\n    datepicker = Datepicker;\n\n    datepicker.prototype = {\n        VERSION: VERSION,\n        viewIndexes: ['days', 'months', 'years'],\n\n        init: function () {\n            if (!containerBuilt && !this.opts.inline && this.elIsInput) {\n                this._buildDatepickersContainer();\n            }\n            this._buildBaseHtml();\n            this._defineLocale(this.opts.language);\n            this._syncWithMinMaxDates();\n\n            if (this.elIsInput) {\n                if (!this.opts.inline) {\n                    // Set extra classes for proper transitions\n                    this._setPositionClasses(this.opts.position);\n                    this._bindEvents()\n                }\n                if (this.opts.keyboardNav && !this.opts.onlyTimepicker) {\n                    this._bindKeyboardEvents();\n                }\n                this.$datepicker.on('mousedown', this._onMouseDownDatepicker.bind(this));\n                this.$datepicker.on('mouseup', this._onMouseUpDatepicker.bind(this));\n            }\n\n            if (this.opts.classes) {\n                this.$datepicker.addClass(this.opts.classes)\n            }\n\n            if (this.opts.timepicker) {\n                this.timepicker = new $.fn.datepicker.Timepicker(this, this.opts);\n                this._bindTimepickerEvents();\n            }\n\n            if (this.opts.onlyTimepicker) {\n                this.$datepicker.addClass('-only-timepicker-');\n            }\n\n            this.views[this.currentView] = new $.fn.datepicker.Body(this, this.currentView, this.opts);\n            this.views[this.currentView].show();\n            this.nav = new $.fn.datepicker.Navigation(this, this.opts);\n            this.view = this.currentView;\n\n            this.$el.on('clickCell.adp', this._onClickCell.bind(this));\n            this.$datepicker.on('mouseenter', '.datepicker--cell', this._onMouseEnterCell.bind(this));\n            this.$datepicker.on('mouseleave', '.datepicker--cell', this._onMouseLeaveCell.bind(this));\n\n            this.inited = true;\n        },\n\n        _createShortCuts: function () {\n            this.minDate = this.opts.minDate ? this.opts.minDate : new Date(-8639999913600000);\n            this.maxDate = this.opts.maxDate ? this.opts.maxDate : new Date(8639999913600000);\n        },\n\n        _bindEvents : function () {\n            this.$el.on(this.opts.showEvent + '.adp', this._onShowEvent.bind(this));\n            this.$el.on('mouseup.adp', this._onMouseUpEl.bind(this));\n            this.$el.on('blur.adp', this._onBlur.bind(this));\n            this.$el.on('keyup.adp', this._onKeyUpGeneral.bind(this));\n            $(window).on('resize.adp', this._onResize.bind(this));\n            $('body').on('mouseup.adp', this._onMouseUpBody.bind(this));\n        },\n\n        _bindKeyboardEvents: function () {\n            this.$el.on('keydown.adp', this._onKeyDown.bind(this));\n            this.$el.on('keyup.adp', this._onKeyUp.bind(this));\n            this.$el.on('hotKey.adp', this._onHotKey.bind(this));\n        },\n\n        _bindTimepickerEvents: function () {\n            this.$el.on('timeChange.adp', this._onTimeChange.bind(this));\n        },\n\n        isWeekend: function (day) {\n            return this.opts.weekends.indexOf(day) !== -1;\n        },\n\n        _defineLocale: function (lang) {\n            if (typeof lang == 'string') {\n                this.loc = $.fn.datepicker.language[lang];\n                if (!this.loc) {\n                    console.warn('Can\\'t find language \"' + lang + '\" in Datepicker.language, will use \"ru\" instead');\n                    this.loc = $.extend(true, {}, $.fn.datepicker.language.ru)\n                }\n\n                this.loc = $.extend(true, {}, $.fn.datepicker.language.ru, $.fn.datepicker.language[lang])\n            } else {\n                this.loc = $.extend(true, {}, $.fn.datepicker.language.ru, lang)\n            }\n\n            if (this.opts.dateFormat) {\n                this.loc.dateFormat = this.opts.dateFormat\n            }\n\n            if (this.opts.timeFormat) {\n                this.loc.timeFormat = this.opts.timeFormat\n            }\n\n            if (this.opts.firstDay !== '') {\n                this.loc.firstDay = this.opts.firstDay\n            }\n\n            if (this.opts.timepicker) {\n                this.loc.dateFormat = [this.loc.dateFormat, this.loc.timeFormat].join(this.opts.dateTimeSeparator);\n            }\n\n            if (this.opts.onlyTimepicker) {\n                this.loc.dateFormat = this.loc.timeFormat;\n            }\n\n            var boundary = this._getWordBoundaryRegExp;\n            if (this.loc.timeFormat.match(boundary('aa')) ||\n                this.loc.timeFormat.match(boundary('AA'))\n            ) {\n               this.ampm = true;\n            }\n        },\n\n        _buildDatepickersContainer: function () {\n            containerBuilt = true;\n            $body.append('<div class=\"datepickers-container\" id=\"datepickers-container\"></div>');\n            $datepickersContainer = $('#datepickers-container');\n        },\n\n        _buildBaseHtml: function () {\n            var $appendTarget,\n                $inline = $('<div class=\"datepicker-inline\">');\n\n            if(this.el.nodeName == 'INPUT') {\n                if (!this.opts.inline) {\n                    $appendTarget = $datepickersContainer;\n                } else {\n                    $appendTarget = $inline.insertAfter(this.$el)\n                }\n            } else {\n                $appendTarget = $inline.appendTo(this.$el)\n            }\n\n            this.$datepicker = $(baseTemplate).appendTo($appendTarget);\n            this.$content = $('.datepicker--content', this.$datepicker);\n            this.$nav = $('.datepicker--nav', this.$datepicker);\n        },\n\n        _triggerOnChange: function () {\n            if (!this.selectedDates.length) {\n                // Prevent from triggering multiple onSelect callback with same argument (empty string) in IE10-11\n                if (this._prevOnSelectValue === '') return;\n                this._prevOnSelectValue = '';\n                return this.opts.onSelect('', '', this);\n            }\n\n            var selectedDates = this.selectedDates,\n                parsedSelected = datepicker.getParsedDate(selectedDates[0]),\n                formattedDates,\n                _this = this,\n                dates = new Date(\n                    parsedSelected.year,\n                    parsedSelected.month,\n                    parsedSelected.date,\n                    parsedSelected.hours,\n                    parsedSelected.minutes\n                );\n\n                formattedDates = selectedDates.map(function (date) {\n                    return _this.formatDate(_this.loc.dateFormat, date)\n                }).join(this.opts.multipleDatesSeparator);\n\n            // Create new dates array, to separate it from original selectedDates\n            if (this.opts.multipleDates || this.opts.range) {\n                dates = selectedDates.map(function(date) {\n                    var parsedDate = datepicker.getParsedDate(date);\n                    return new Date(\n                        parsedDate.year,\n                        parsedDate.month,\n                        parsedDate.date,\n                        parsedDate.hours,\n                        parsedDate.minutes\n                    );\n                })\n            }\n\n            this._prevOnSelectValue = formattedDates;\n            this.opts.onSelect(formattedDates, dates, this);\n        },\n\n        next: function () {\n            var d = this.parsedDate,\n                o = this.opts;\n            switch (this.view) {\n                case 'days':\n                    this.date = new Date(d.year, d.month + 1, 1);\n                    if (o.onChangeMonth) o.onChangeMonth(this.parsedDate.month, this.parsedDate.year);\n                    break;\n                case 'months':\n                    this.date = new Date(d.year + 1, d.month, 1);\n                    if (o.onChangeYear) o.onChangeYear(this.parsedDate.year);\n                    break;\n                case 'years':\n                    this.date = new Date(d.year + 10, 0, 1);\n                    if (o.onChangeDecade) o.onChangeDecade(this.curDecade);\n                    break;\n            }\n        },\n\n        prev: function () {\n            var d = this.parsedDate,\n                o = this.opts;\n            switch (this.view) {\n                case 'days':\n                    this.date = new Date(d.year, d.month - 1, 1);\n                    if (o.onChangeMonth) o.onChangeMonth(this.parsedDate.month, this.parsedDate.year);\n                    break;\n                case 'months':\n                    this.date = new Date(d.year - 1, d.month, 1);\n                    if (o.onChangeYear) o.onChangeYear(this.parsedDate.year);\n                    break;\n                case 'years':\n                    this.date = new Date(d.year - 10, 0, 1);\n                    if (o.onChangeDecade) o.onChangeDecade(this.curDecade);\n                    break;\n            }\n        },\n\n        formatDate: function (string, date) {\n            date = date || this.date;\n            var result = string,\n                boundary = this._getWordBoundaryRegExp,\n                locale = this.loc,\n                leadingZero = datepicker.getLeadingZeroNum,\n                decade = datepicker.getDecade(date),\n                d = datepicker.getParsedDate(date),\n                fullHours = d.fullHours,\n                hours = d.hours,\n                ampm = string.match(boundary('aa')) || string.match(boundary('AA')),\n                dayPeriod = 'am',\n                replacer = this._replacer,\n                validHours;\n\n            if (this.opts.timepicker && this.timepicker && ampm) {\n                validHours = this.timepicker._getValidHoursFromDate(date, ampm);\n                fullHours = leadingZero(validHours.hours);\n                hours = validHours.hours;\n                dayPeriod = validHours.dayPeriod;\n            }\n\n            switch (true) {\n                case /@/.test(result):\n                    result = result.replace(/@/, date.getTime());\n                case /aa/.test(result):\n                    result = replacer(result, boundary('aa'), dayPeriod);\n                case /AA/.test(result):\n                    result = replacer(result, boundary('AA'), dayPeriod.toUpperCase());\n                case /dd/.test(result):\n                    result = replacer(result, boundary('dd'), d.fullDate);\n                case /d/.test(result):\n                    result = replacer(result, boundary('d'), d.date);\n                case /DD/.test(result):\n                    result = replacer(result, boundary('DD'), locale.days[d.day]);\n                case /D/.test(result):\n                    result = replacer(result, boundary('D'), locale.daysShort[d.day]);\n                case /mm/.test(result):\n                    result = replacer(result, boundary('mm'), d.fullMonth);\n                case /m/.test(result):\n                    result = replacer(result, boundary('m'), d.month + 1);\n                case /MM/.test(result):\n                    result = replacer(result, boundary('MM'), this.loc.months[d.month]);\n                case /M/.test(result):\n                    result = replacer(result, boundary('M'), locale.monthsShort[d.month]);\n                case /ii/.test(result):\n                    result = replacer(result, boundary('ii'), d.fullMinutes);\n                case /i/.test(result):\n                    result = replacer(result, boundary('i'), d.minutes);\n                case /hh/.test(result):\n                    result = replacer(result, boundary('hh'), fullHours);\n                case /h/.test(result):\n                    result = replacer(result, boundary('h'), hours);\n                case /yyyy/.test(result):\n                    result = replacer(result, boundary('yyyy'), d.year);\n                case /yyyy1/.test(result):\n                    result = replacer(result, boundary('yyyy1'), decade[0]);\n                case /yyyy2/.test(result):\n                    result = replacer(result, boundary('yyyy2'), decade[1]);\n                case /yy/.test(result):\n                    result = replacer(result, boundary('yy'), d.year.toString().slice(-2));\n            }\n\n            return result;\n        },\n\n        _replacer: function (str, reg, data) {\n            return str.replace(reg, function (match, p1,p2,p3) {\n                return p1 + data + p3;\n            })\n        },\n\n        _getWordBoundaryRegExp: function (sign) {\n            var symbols = '\\\\s|\\\\.|-|/|\\\\\\\\|,|\\\\$|\\\\!|\\\\?|:|;';\n\n            return new RegExp('(^|>|' + symbols + ')(' + sign + ')($|<|' + symbols + ')', 'g');\n        },\n\n\n        selectDate: function (date) {\n            var _this = this,\n                opts = _this.opts,\n                d = _this.parsedDate,\n                selectedDates = _this.selectedDates,\n                len = selectedDates.length,\n                newDate = '';\n\n            if (Array.isArray(date)) {\n                date.forEach(function (d) {\n                    _this.selectDate(d)\n                });\n                return;\n            }\n\n            if (!(date instanceof Date)) return;\n\n            this.lastSelectedDate = date;\n\n            // Set new time values from Date\n            if (this.timepicker) {\n                this.timepicker._setTime(date);\n            }\n\n            // On this step timepicker will set valid values in it's instance\n            _this._trigger('selectDate', date);\n\n            // Set correct time values after timepicker's validation\n            // Prevent from setting hours or minutes which values are lesser then `min` value or\n            // greater then `max` value\n            if (this.timepicker) {\n                date.setHours(this.timepicker.hours);\n                date.setMinutes(this.timepicker.minutes)\n            }\n\n            if (_this.view == 'days') {\n                if (date.getMonth() != d.month && opts.moveToOtherMonthsOnSelect) {\n                    newDate = new Date(date.getFullYear(), date.getMonth(), 1);\n                }\n            }\n\n            if (_this.view == 'years') {\n                if (date.getFullYear() != d.year && opts.moveToOtherYearsOnSelect) {\n                    newDate = new Date(date.getFullYear(), 0, 1);\n                }\n            }\n\n            if (newDate) {\n                _this.silent = true;\n                _this.date = newDate;\n                _this.silent = false;\n                _this.nav._render()\n            }\n\n            if (opts.multipleDates && !opts.range) { // Set priority to range functionality\n                if (len === opts.multipleDates) return;\n                if (!_this._isSelected(date)) {\n                    _this.selectedDates.push(date);\n                }\n            } else if (opts.range) {\n                if (len == 2) {\n                    _this.selectedDates = [date];\n                    _this.minRange = date;\n                    _this.maxRange = '';\n                } else if (len == 1) {\n                    _this.selectedDates.push(date);\n                    if (!_this.maxRange){\n                        _this.maxRange = date;\n                    } else {\n                        _this.minRange = date;\n                    }\n                    // Swap dates if they were selected via dp.selectDate() and second date was smaller then first\n                    if (datepicker.bigger(_this.maxRange, _this.minRange)) {\n                        _this.maxRange = _this.minRange;\n                        _this.minRange = date;\n                    }\n                    _this.selectedDates = [_this.minRange, _this.maxRange]\n\n                } else {\n                    _this.selectedDates = [date];\n                    _this.minRange = date;\n                }\n            } else {\n                _this.selectedDates = [date];\n            }\n\n            _this._setInputValue();\n\n            if (opts.onSelect) {\n                _this._triggerOnChange();\n            }\n\n            if (opts.autoClose && !this.timepickerIsActive) {\n                if (!opts.multipleDates && !opts.range) {\n                    _this.hide();\n                } else if (opts.range && _this.selectedDates.length == 2) {\n                    _this.hide();\n                }\n            }\n\n            _this.views[this.currentView]._render()\n        },\n\n        removeDate: function (date) {\n            var selected = this.selectedDates,\n                _this = this;\n\n            if (!(date instanceof Date)) return;\n\n            return selected.some(function (curDate, i) {\n                if (datepicker.isSame(curDate, date)) {\n                    selected.splice(i, 1);\n\n                    if (!_this.selectedDates.length) {\n                        _this.minRange = '';\n                        _this.maxRange = '';\n                        _this.lastSelectedDate = '';\n                    } else {\n                        _this.lastSelectedDate = _this.selectedDates[_this.selectedDates.length - 1];\n                    }\n\n                    _this.views[_this.currentView]._render();\n                    _this._setInputValue();\n\n                    if (_this.opts.onSelect) {\n                        _this._triggerOnChange();\n                    }\n\n                    return true\n                }\n            })\n        },\n\n        today: function () {\n            this.silent = true;\n            this.view = this.opts.minView;\n            this.silent = false;\n            this.date = new Date();\n\n            if (this.opts.todayButton instanceof Date) {\n                this.selectDate(this.opts.todayButton)\n            }\n        },\n\n        clear: function () {\n            this.selectedDates = [];\n            this.minRange = '';\n            this.maxRange = '';\n            this.views[this.currentView]._render();\n            this._setInputValue();\n            if (this.opts.onSelect) {\n                this._triggerOnChange()\n            }\n        },\n\n        /**\n         * Updates datepicker options\n         * @param {String|Object} param - parameter's name to update. If object then it will extend current options\n         * @param {String|Number|Object} [value] - new param value\n         */\n        update: function (param, value) {\n            var len = arguments.length,\n                lastSelectedDate = this.lastSelectedDate;\n\n            if (len == 2) {\n                this.opts[param] = value;\n            } else if (len == 1 && typeof param == 'object') {\n                this.opts = $.extend(true, this.opts, param)\n            }\n\n            this._createShortCuts();\n            this._syncWithMinMaxDates();\n            this._defineLocale(this.opts.language);\n            this.nav._addButtonsIfNeed();\n            if (!this.opts.onlyTimepicker) this.nav._render();\n            this.views[this.currentView]._render();\n\n            if (this.elIsInput && !this.opts.inline) {\n                this._setPositionClasses(this.opts.position);\n                if (this.visible) {\n                    this.setPosition(this.opts.position)\n                }\n            }\n\n            if (this.opts.classes) {\n                this.$datepicker.addClass(this.opts.classes)\n            }\n\n            if (this.opts.onlyTimepicker) {\n                this.$datepicker.addClass('-only-timepicker-');\n            }\n\n            if (this.opts.timepicker) {\n                if (lastSelectedDate) this.timepicker._handleDate(lastSelectedDate);\n                this.timepicker._updateRanges();\n                this.timepicker._updateCurrentTime();\n                // Change hours and minutes if it's values have been changed through min/max hours/minutes\n                if (lastSelectedDate) {\n                    lastSelectedDate.setHours(this.timepicker.hours);\n                    lastSelectedDate.setMinutes(this.timepicker.minutes);\n                }\n            }\n\n            this._setInputValue();\n\n            return this;\n        },\n\n        _syncWithMinMaxDates: function () {\n            var curTime = this.date.getTime();\n            this.silent = true;\n            if (this.minTime > curTime) {\n                this.date = this.minDate;\n            }\n\n            if (this.maxTime < curTime) {\n                this.date = this.maxDate;\n            }\n            this.silent = false;\n        },\n\n        _isSelected: function (checkDate, cellType) {\n            var res = false;\n            this.selectedDates.some(function (date) {\n                if (datepicker.isSame(date, checkDate, cellType)) {\n                    res = date;\n                    return true;\n                }\n            });\n            return res;\n        },\n\n        _setInputValue: function () {\n            var _this = this,\n                opts = _this.opts,\n                format = _this.loc.dateFormat,\n                altFormat = opts.altFieldDateFormat,\n                value = _this.selectedDates.map(function (date) {\n                    return _this.formatDate(format, date)\n                }),\n                altValues;\n\n            if (opts.altField && _this.$altField.length) {\n                altValues = this.selectedDates.map(function (date) {\n                    return _this.formatDate(altFormat, date)\n                });\n                altValues = altValues.join(this.opts.multipleDatesSeparator);\n                this.$altField.val(altValues);\n            }\n\n            value = value.join(this.opts.multipleDatesSeparator);\n\n            this.$el.val(value)\n        },\n\n        /**\n         * Check if date is between minDate and maxDate\n         * @param date {object} - date object\n         * @param type {string} - cell type\n         * @returns {boolean}\n         * @private\n         */\n        _isInRange: function (date, type) {\n            var time = date.getTime(),\n                d = datepicker.getParsedDate(date),\n                min = datepicker.getParsedDate(this.minDate),\n                max = datepicker.getParsedDate(this.maxDate),\n                dMinTime = new Date(d.year, d.month, min.date).getTime(),\n                dMaxTime = new Date(d.year, d.month, max.date).getTime(),\n                types = {\n                    day: time >= this.minTime && time <= this.maxTime,\n                    month: dMinTime >= this.minTime && dMaxTime <= this.maxTime,\n                    year: d.year >= min.year && d.year <= max.year\n                };\n            return type ? types[type] : types.day\n        },\n\n        _getDimensions: function ($el) {\n            var offset = $el.offset();\n\n            return {\n                width: $el.outerWidth(),\n                height: $el.outerHeight(),\n                left: offset.left,\n                top: offset.top\n            }\n        },\n\n        _getDateFromCell: function (cell) {\n            var curDate = this.parsedDate,\n                year = cell.data('year') || curDate.year,\n                month = cell.data('month') == undefined ? curDate.month : cell.data('month'),\n                date = cell.data('date') || 1;\n\n            return new Date(year, month, date);\n        },\n\n        _setPositionClasses: function (pos) {\n            pos = pos.split(' ');\n            var main = pos[0],\n                sec = pos[1],\n                classes = 'datepicker -' + main + '-' + sec + '- -from-' + main + '-';\n\n            if (this.visible) classes += ' active';\n\n            this.$datepicker\n                .removeAttr('class')\n                .addClass(classes);\n        },\n\n        setPosition: function (position) {\n            position = position || this.opts.position;\n\n            var dims = this._getDimensions(this.$el),\n                selfDims = this._getDimensions(this.$datepicker),\n                pos = position.split(' '),\n                top, left,\n                offset = this.opts.offset,\n                main = pos[0],\n                secondary = pos[1];\n\n            switch (main) {\n                case 'top':\n                    top = dims.top - selfDims.height - offset;\n                    break;\n                case 'right':\n                    left = dims.left + dims.width + offset;\n                    break;\n                case 'bottom':\n                    top = dims.top + dims.height + offset;\n                    break;\n                case 'left':\n                    left = dims.left - selfDims.width - offset;\n                    break;\n            }\n\n            switch(secondary) {\n                case 'top':\n                    top = dims.top;\n                    break;\n                case 'right':\n                    left = dims.left + dims.width - selfDims.width;\n                    break;\n                case 'bottom':\n                    top = dims.top + dims.height - selfDims.height;\n                    break;\n                case 'left':\n                    left = dims.left;\n                    break;\n                case 'center':\n                    if (/left|right/.test(main)) {\n                        top = dims.top + dims.height/2 - selfDims.height/2;\n                    } else {\n                        left = dims.left + dims.width/2 - selfDims.width/2;\n                    }\n            }\n\n            this.$datepicker\n                .css({\n                    left: left,\n                    top: top\n                })\n        },\n\n        show: function () {\n            var onShow = this.opts.onShow;\n\n            this.setPosition(this.opts.position);\n            this.$datepicker.addClass('active');\n            this.visible = true;\n\n            if (onShow) {\n                this._bindVisionEvents(onShow)\n            }\n        },\n\n        hide: function () {\n            var onHide = this.opts.onHide;\n\n            this.$datepicker\n                .removeClass('active')\n                .css({\n                    left: '-100000px'\n                });\n\n            this.focused = '';\n            this.keys = [];\n\n            this.inFocus = false;\n            this.visible = false;\n            this.$el.blur();\n\n            if (onHide) {\n                this._bindVisionEvents(onHide)\n            }\n        },\n\n        down: function (date) {\n            this._changeView(date, 'down');\n        },\n\n        up: function (date) {\n            this._changeView(date, 'up');\n        },\n\n        _bindVisionEvents: function (event) {\n            this.$datepicker.off('transitionend.dp');\n            event(this, false);\n            this.$datepicker.one('transitionend.dp', event.bind(this, this, true))\n        },\n\n        _changeView: function (date, dir) {\n            date = date || this.focused || this.date;\n\n            var nextView = dir == 'up' ? this.viewIndex + 1 : this.viewIndex - 1;\n            if (nextView > 2) nextView = 2;\n            if (nextView < 0) nextView = 0;\n\n            this.silent = true;\n            this.date = new Date(date.getFullYear(), date.getMonth(), 1);\n            this.silent = false;\n            this.view = this.viewIndexes[nextView];\n\n        },\n\n        _handleHotKey: function (key) {\n            var date = datepicker.getParsedDate(this._getFocusedDate()),\n                focusedParsed,\n                o = this.opts,\n                newDate,\n                totalDaysInNextMonth,\n                monthChanged = false,\n                yearChanged = false,\n                decadeChanged = false,\n                y = date.year,\n                m = date.month,\n                d = date.date;\n\n            switch (key) {\n                case 'ctrlRight':\n                case 'ctrlUp':\n                    m += 1;\n                    monthChanged = true;\n                    break;\n                case 'ctrlLeft':\n                case 'ctrlDown':\n                    m -= 1;\n                    monthChanged = true;\n                    break;\n                case 'shiftRight':\n                case 'shiftUp':\n                    yearChanged = true;\n                    y += 1;\n                    break;\n                case 'shiftLeft':\n                case 'shiftDown':\n                    yearChanged = true;\n                    y -= 1;\n                    break;\n                case 'altRight':\n                case 'altUp':\n                    decadeChanged = true;\n                    y += 10;\n                    break;\n                case 'altLeft':\n                case 'altDown':\n                    decadeChanged = true;\n                    y -= 10;\n                    break;\n                case 'ctrlShiftUp':\n                    this.up();\n                    break;\n            }\n\n            totalDaysInNextMonth = datepicker.getDaysCount(new Date(y,m));\n            newDate = new Date(y,m,d);\n\n            // If next month has less days than current, set date to total days in that month\n            if (totalDaysInNextMonth < d) d = totalDaysInNextMonth;\n\n            // Check if newDate is in valid range\n            if (newDate.getTime() < this.minTime) {\n                newDate = this.minDate;\n            } else if (newDate.getTime() > this.maxTime) {\n                newDate = this.maxDate;\n            }\n\n            this.focused = newDate;\n\n            focusedParsed = datepicker.getParsedDate(newDate);\n            if (monthChanged && o.onChangeMonth) {\n                o.onChangeMonth(focusedParsed.month, focusedParsed.year)\n            }\n            if (yearChanged && o.onChangeYear) {\n                o.onChangeYear(focusedParsed.year)\n            }\n            if (decadeChanged && o.onChangeDecade) {\n                o.onChangeDecade(this.curDecade)\n            }\n        },\n\n        _registerKey: function (key) {\n            var exists = this.keys.some(function (curKey) {\n                return curKey == key;\n            });\n\n            if (!exists) {\n                this.keys.push(key)\n            }\n        },\n\n        _unRegisterKey: function (key) {\n            var index = this.keys.indexOf(key);\n\n            this.keys.splice(index, 1);\n        },\n\n        _isHotKeyPressed: function () {\n            var currentHotKey,\n                found = false,\n                _this = this,\n                pressedKeys = this.keys.sort();\n\n            for (var hotKey in hotKeys) {\n                currentHotKey = hotKeys[hotKey];\n                if (pressedKeys.length != currentHotKey.length) continue;\n\n                if (currentHotKey.every(function (key, i) { return key == pressedKeys[i]})) {\n                    _this._trigger('hotKey', hotKey);\n                    found = true;\n                }\n            }\n\n            return found;\n        },\n\n        _trigger: function (event, args) {\n            this.$el.trigger(event, args)\n        },\n\n        _focusNextCell: function (keyCode, type) {\n            type = type || this.cellType;\n\n            var date = datepicker.getParsedDate(this._getFocusedDate()),\n                y = date.year,\n                m = date.month,\n                d = date.date;\n\n            if (this._isHotKeyPressed()){\n                return;\n            }\n\n            switch(keyCode) {\n                case 37: // left\n                    type == 'day' ? (d -= 1) : '';\n                    type == 'month' ? (m -= 1) : '';\n                    type == 'year' ? (y -= 1) : '';\n                    break;\n                case 38: // up\n                    type == 'day' ? (d -= 7) : '';\n                    type == 'month' ? (m -= 3) : '';\n                    type == 'year' ? (y -= 4) : '';\n                    break;\n                case 39: // right\n                    type == 'day' ? (d += 1) : '';\n                    type == 'month' ? (m += 1) : '';\n                    type == 'year' ? (y += 1) : '';\n                    break;\n                case 40: // down\n                    type == 'day' ? (d += 7) : '';\n                    type == 'month' ? (m += 3) : '';\n                    type == 'year' ? (y += 4) : '';\n                    break;\n            }\n\n            var nd = new Date(y,m,d);\n            if (nd.getTime() < this.minTime) {\n                nd = this.minDate;\n            } else if (nd.getTime() > this.maxTime) {\n                nd = this.maxDate;\n            }\n\n            this.focused = nd;\n\n        },\n\n        _getFocusedDate: function () {\n            var focused  = this.focused || this.selectedDates[this.selectedDates.length - 1],\n                d = this.parsedDate;\n\n            if (!focused) {\n                switch (this.view) {\n                    case 'days':\n                        focused = new Date(d.year, d.month, new Date().getDate());\n                        break;\n                    case 'months':\n                        focused = new Date(d.year, d.month, 1);\n                        break;\n                    case 'years':\n                        focused = new Date(d.year, 0, 1);\n                        break;\n                }\n            }\n\n            return focused;\n        },\n\n        _getCell: function (date, type) {\n            type = type || this.cellType;\n\n            var d = datepicker.getParsedDate(date),\n                selector = '.datepicker--cell[data-year=\"' + d.year + '\"]',\n                $cell;\n\n            switch (type) {\n                case 'month':\n                    selector = '[data-month=\"' + d.month + '\"]';\n                    break;\n                case 'day':\n                    selector += '[data-month=\"' + d.month + '\"][data-date=\"' + d.date + '\"]';\n                    break;\n            }\n            $cell = this.views[this.currentView].$el.find(selector);\n\n            return $cell.length ? $cell : $('');\n        },\n\n        destroy: function () {\n            var _this = this;\n            _this.$el\n                .off('.adp')\n                .data('datepicker', '');\n\n            _this.selectedDates = [];\n            _this.focused = '';\n            _this.views = {};\n            _this.keys = [];\n            _this.minRange = '';\n            _this.maxRange = '';\n\n            if (_this.opts.inline || !_this.elIsInput) {\n                _this.$datepicker.closest('.datepicker-inline').remove();\n            } else {\n                _this.$datepicker.remove();\n            }\n        },\n\n        _handleAlreadySelectedDates: function (alreadySelected, selectedDate) {\n            if (this.opts.range) {\n                if (!this.opts.toggleSelected) {\n                    // Add possibility to select same date when range is true\n                    if (this.selectedDates.length != 2) {\n                        this._trigger('clickCell', selectedDate);\n                    }\n                } else {\n                    this.removeDate(selectedDate);\n                }\n            } else if (this.opts.toggleSelected){\n                this.removeDate(selectedDate);\n            }\n\n            // Change last selected date to be able to change time when clicking on this cell\n            if (!this.opts.toggleSelected) {\n                this.lastSelectedDate = alreadySelected;\n                if (this.opts.timepicker) {\n                    this.timepicker._setTime(alreadySelected);\n                    this.timepicker.update();\n                }\n            }\n        },\n\n        _onShowEvent: function (e) {\n            if (!this.visible) {\n                this.show();\n            }\n        },\n\n        _onBlur: function () {\n            if (!this.inFocus && this.visible) {\n                this.hide();\n            }\n        },\n\n        _onMouseDownDatepicker: function (e) {\n            this.inFocus = true;\n        },\n\n        _onMouseUpDatepicker: function (e) {\n            this.inFocus = false;\n            e.originalEvent.inFocus = true;\n            if (!e.originalEvent.timepickerFocus) this.$el.focus();\n        },\n\n        _onKeyUpGeneral: function (e) {\n            var val = this.$el.val();\n\n            if (!val) {\n                this.clear();\n            }\n        },\n\n        _onResize: function () {\n            if (this.visible) {\n                this.setPosition();\n            }\n        },\n\n        _onMouseUpBody: function (e) {\n            if (e.originalEvent.inFocus) return;\n\n            if (this.visible && !this.inFocus) {\n                this.hide();\n            }\n        },\n\n        _onMouseUpEl: function (e) {\n            e.originalEvent.inFocus = true;\n            setTimeout(this._onKeyUpGeneral.bind(this),4);\n        },\n\n        _onKeyDown: function (e) {\n            var code = e.which;\n            this._registerKey(code);\n\n            // Arrows\n            if (code >= 37 && code <= 40) {\n                e.preventDefault();\n                this._focusNextCell(code);\n            }\n\n            // Enter\n            if (code == 13) {\n                if (this.focused) {\n                    if (this._getCell(this.focused).hasClass('-disabled-')) return;\n                    if (this.view != this.opts.minView) {\n                        this.down()\n                    } else {\n                        var alreadySelected = this._isSelected(this.focused, this.cellType);\n\n                        if (!alreadySelected) {\n                            if (this.timepicker) {\n                                this.focused.setHours(this.timepicker.hours);\n                                this.focused.setMinutes(this.timepicker.minutes);\n                            }\n                            this.selectDate(this.focused);\n                            return;\n                        }\n                        this._handleAlreadySelectedDates(alreadySelected, this.focused)\n                    }\n                }\n            }\n\n            // Esc\n            if (code == 27) {\n                this.hide();\n            }\n        },\n\n        _onKeyUp: function (e) {\n            var code = e.which;\n            this._unRegisterKey(code);\n        },\n\n        _onHotKey: function (e, hotKey) {\n            this._handleHotKey(hotKey);\n        },\n\n        _onMouseEnterCell: function (e) {\n            var $cell = $(e.target).closest('.datepicker--cell'),\n                date = this._getDateFromCell($cell);\n\n            // Prevent from unnecessary rendering and setting new currentDate\n            this.silent = true;\n\n            if (this.focused) {\n                this.focused = ''\n            }\n\n            $cell.addClass('-focus-');\n\n            this.focused = date;\n            this.silent = false;\n\n            if (this.opts.range && this.selectedDates.length == 1) {\n                this.minRange = this.selectedDates[0];\n                this.maxRange = '';\n                if (datepicker.less(this.minRange, this.focused)) {\n                    this.maxRange = this.minRange;\n                    this.minRange = '';\n                }\n                this.views[this.currentView]._update();\n            }\n        },\n\n        _onMouseLeaveCell: function (e) {\n            var $cell = $(e.target).closest('.datepicker--cell');\n\n            $cell.removeClass('-focus-');\n\n            this.silent = true;\n            this.focused = '';\n            this.silent = false;\n        },\n\n        _onTimeChange: function (e, h, m) {\n            var date = new Date(),\n                selectedDates = this.selectedDates,\n                selected = false;\n\n            if (selectedDates.length) {\n                selected = true;\n                date = this.lastSelectedDate;\n            }\n\n            date.setHours(h);\n            date.setMinutes(m);\n\n            if (!selected && !this._getCell(date).hasClass('-disabled-')) {\n                this.selectDate(date);\n            } else {\n                this._setInputValue();\n                if (this.opts.onSelect) {\n                    this._triggerOnChange();\n                }\n            }\n        },\n\n        _onClickCell: function (e, date) {\n            if (this.timepicker) {\n                date.setHours(this.timepicker.hours);\n                date.setMinutes(this.timepicker.minutes);\n            }\n            this.selectDate(date);\n        },\n\n        set focused(val) {\n            if (!val && this.focused) {\n                var $cell = this._getCell(this.focused);\n\n                if ($cell.length) {\n                    $cell.removeClass('-focus-')\n                }\n            }\n            this._focused = val;\n            if (this.opts.range && this.selectedDates.length == 1) {\n                this.minRange = this.selectedDates[0];\n                this.maxRange = '';\n                if (datepicker.less(this.minRange, this._focused)) {\n                    this.maxRange = this.minRange;\n                    this.minRange = '';\n                }\n            }\n            if (this.silent) return;\n            this.date = val;\n        },\n\n        get focused() {\n            return this._focused;\n        },\n\n        get parsedDate() {\n            return datepicker.getParsedDate(this.date);\n        },\n\n        set date (val) {\n            if (!(val instanceof Date)) return;\n\n            this.currentDate = val;\n\n            if (this.inited && !this.silent) {\n                this.views[this.view]._render();\n                this.nav._render();\n                if (this.visible && this.elIsInput) {\n                    this.setPosition();\n                }\n            }\n            return val;\n        },\n\n        get date () {\n            return this.currentDate\n        },\n\n        set view (val) {\n            this.viewIndex = this.viewIndexes.indexOf(val);\n\n            if (this.viewIndex < 0) {\n                return;\n            }\n\n            this.prevView = this.currentView;\n            this.currentView = val;\n\n            if (this.inited) {\n                if (!this.views[val]) {\n                    this.views[val] = new  $.fn.datepicker.Body(this, val, this.opts)\n                } else {\n                    this.views[val]._render();\n                }\n\n                this.views[this.prevView].hide();\n                this.views[val].show();\n                this.nav._render();\n\n                if (this.opts.onChangeView) {\n                    this.opts.onChangeView(val)\n                }\n                if (this.elIsInput && this.visible) this.setPosition();\n            }\n\n            return val\n        },\n\n        get view() {\n            return this.currentView;\n        },\n\n        get cellType() {\n            return this.view.substring(0, this.view.length - 1)\n        },\n\n        get minTime() {\n            var min = datepicker.getParsedDate(this.minDate);\n            return new Date(min.year, min.month, min.date).getTime()\n        },\n\n        get maxTime() {\n            var max = datepicker.getParsedDate(this.maxDate);\n            return new Date(max.year, max.month, max.date).getTime()\n        },\n\n        get curDecade() {\n            return datepicker.getDecade(this.date)\n        }\n    };\n\n    //  Utils\n    // -------------------------------------------------\n\n    datepicker.getDaysCount = function (date) {\n        return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n    };\n\n    datepicker.getParsedDate = function (date) {\n        return {\n            year: date.getFullYear(),\n            month: date.getMonth(),\n            fullMonth: (date.getMonth() + 1) < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1, // One based\n            date: date.getDate(),\n            fullDate: date.getDate() < 10 ? '0' + date.getDate() : date.getDate(),\n            day: date.getDay(),\n            hours: date.getHours(),\n            fullHours:  date.getHours() < 10 ? '0' + date.getHours() :  date.getHours() ,\n            minutes: date.getMinutes(),\n            fullMinutes:  date.getMinutes() < 10 ? '0' + date.getMinutes() :  date.getMinutes()\n        }\n    };\n\n    datepicker.getDecade = function (date) {\n        var firstYear = Math.floor(date.getFullYear() / 10) * 10;\n\n        return [firstYear, firstYear + 9];\n    };\n\n    datepicker.template = function (str, data) {\n        return str.replace(/#\\{([\\w]+)\\}/g, function (source, match) {\n            if (data[match] || data[match] === 0) {\n                return data[match]\n            }\n        });\n    };\n\n    datepicker.isSame = function (date1, date2, type) {\n        if (!date1 || !date2) return false;\n        var d1 = datepicker.getParsedDate(date1),\n            d2 = datepicker.getParsedDate(date2),\n            _type = type ? type : 'day',\n\n            conditions = {\n                day: d1.date == d2.date && d1.month == d2.month && d1.year == d2.year,\n                month: d1.month == d2.month && d1.year == d2.year,\n                year: d1.year == d2.year\n            };\n\n        return conditions[_type];\n    };\n\n    datepicker.less = function (dateCompareTo, date, type) {\n        if (!dateCompareTo || !date) return false;\n        return date.getTime() < dateCompareTo.getTime();\n    };\n\n    datepicker.bigger = function (dateCompareTo, date, type) {\n        if (!dateCompareTo || !date) return false;\n        return date.getTime() > dateCompareTo.getTime();\n    };\n\n    datepicker.getLeadingZeroNum = function (num) {\n        return parseInt(num) < 10 ? '0' + num : num;\n    };\n\n    /**\n     * Returns copy of date with hours and minutes equals to 0\n     * @param date {Date}\n     */\n    datepicker.resetTime = function (date) {\n        if (typeof date != 'object') return;\n        date = datepicker.getParsedDate(date);\n        return new Date(date.year, date.month, date.date)\n    };\n\n    $.fn.datepicker = function ( options ) {\n        return this.each(function () {\n            if (!$.data(this, pluginName)) {\n                $.data(this,  pluginName,\n                    new Datepicker( this, options ));\n            } else {\n                var _this = $.data(this, pluginName);\n\n                _this.opts = $.extend(true, _this.opts, options);\n                _this.update();\n            }\n        });\n    };\n\n    $.fn.datepicker.Constructor = Datepicker;\n\n    $.fn.datepicker.language = {\n        ru: {\n            days: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],\n            daysShort: ['Вос','Пон','Вто','Сре','Чет','Пят','Суб'],\n            daysMin: ['Вс','Пн','Вт','Ср','Чт','Пт','Сб'],\n            months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],\n            monthsShort: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],\n            today: 'Сегодня',\n            clear: 'Очистить',\n            submit: 'Применить',\n            dateFormat: 'dd.mm.yyyy',\n            timeFormat: 'hh:ii',\n            firstDay: 1\n        }\n    };\n\n    $(function () {\n        $(autoInitSelector).datepicker();\n    })\n\n})();\n\n;(function () {\n    var templates = {\n        days:'' +\n        '<div class=\"datepicker--days datepicker--body\">' +\n        '<div class=\"datepicker--days-names\"></div>' +\n        '<div class=\"datepicker--cells datepicker--cells-days\"></div>' +\n        '</div>',\n        months: '' +\n        '<div class=\"datepicker--months datepicker--body\">' +\n        '<div class=\"datepicker--cells datepicker--cells-months\"></div>' +\n        '</div>',\n        years: '' +\n        '<div class=\"datepicker--years datepicker--body\">' +\n        '<div class=\"datepicker--cells datepicker--cells-years\"></div>' +\n        '</div>'\n        },\n        datepicker = $.fn.datepicker,\n        dp = datepicker.Constructor;\n\n    datepicker.Body = function (d, type, opts) {\n        this.d = d;\n        this.type = type;\n        this.opts = opts;\n        this.$el = $('');\n\n        if (this.opts.onlyTimepicker) return;\n        this.init();\n    };\n\n    datepicker.Body.prototype = {\n        init: function () {\n            this._buildBaseHtml();\n            this._render();\n\n            this._bindEvents();\n        },\n\n        _bindEvents: function () {\n            this.$el.on('click', '.datepicker--cell', $.proxy(this._onClickCell, this));\n        },\n\n        _buildBaseHtml: function () {\n            this.$el = $(templates[this.type]).appendTo(this.d.$content);\n            this.$names = $('.datepicker--days-names', this.$el);\n            this.$cells = $('.datepicker--cells', this.$el);\n        },\n\n        _getDayNamesHtml: function (firstDay, curDay, html, i) {\n            curDay = curDay != undefined ? curDay : firstDay;\n            html = html ? html : '';\n            i = i != undefined ? i : 0;\n\n            if (i > 7) return html;\n            if (curDay == 7) return this._getDayNamesHtml(firstDay, 0, html, ++i);\n\n            html += '<div class=\"datepicker--day-name' + (this.d.isWeekend(curDay) ? \" -weekend-\" : \"\") + '\">' + this.d.loc.daysMin[curDay] + '</div>';\n\n            return this._getDayNamesHtml(firstDay, ++curDay, html, ++i);\n        },\n\n        _getCellContents: function (date, type) {\n            var classes = \"datepicker--cell datepicker--cell-\" + type,\n                currentDate = new Date(),\n                parent = this.d,\n                minRange = dp.resetTime(parent.minRange),\n                maxRange = dp.resetTime(parent.maxRange),\n                opts = parent.opts,\n                d = dp.getParsedDate(date),\n                render = {},\n                html = d.date;\n\n            switch (type) {\n                case 'day':\n                    if (parent.isWeekend(d.day)) classes += \" -weekend-\";\n                    if (d.month != this.d.parsedDate.month) {\n                        classes += \" -other-month-\";\n                        if (!opts.selectOtherMonths) {\n                            classes += \" -disabled-\";\n                        }\n                        if (!opts.showOtherMonths) html = '';\n                    }\n                    break;\n                case 'month':\n                    html = parent.loc[parent.opts.monthsField][d.month];\n                    break;\n                case 'year':\n                    var decade = parent.curDecade;\n                    html = d.year;\n                    if (d.year < decade[0] || d.year > decade[1]) {\n                        classes += ' -other-decade-';\n                        if (!opts.selectOtherYears) {\n                            classes += \" -disabled-\";\n                        }\n                        if (!opts.showOtherYears) html = '';\n                    }\n                    break;\n            }\n\n            if (opts.onRenderCell) {\n                render = opts.onRenderCell(date, type) || {};\n                html = render.html ? render.html : html;\n                classes += render.classes ? ' ' + render.classes : '';\n            }\n\n            if (opts.range) {\n                if (dp.isSame(minRange, date, type)) classes += ' -range-from-';\n                if (dp.isSame(maxRange, date, type)) classes += ' -range-to-';\n\n                if (parent.selectedDates.length == 1 && parent.focused) {\n                    if (\n                        (dp.bigger(minRange, date) && dp.less(parent.focused, date)) ||\n                        (dp.less(maxRange, date) && dp.bigger(parent.focused, date)))\n                    {\n                        classes += ' -in-range-'\n                    }\n\n                    if (dp.less(maxRange, date) && dp.isSame(parent.focused, date)) {\n                        classes += ' -range-from-'\n                    }\n                    if (dp.bigger(minRange, date) && dp.isSame(parent.focused, date)) {\n                        classes += ' -range-to-'\n                    }\n\n                } else if (parent.selectedDates.length == 2) {\n                    if (dp.bigger(minRange, date) && dp.less(maxRange, date)) {\n                        classes += ' -in-range-'\n                    }\n                }\n            }\n\n\n            if (dp.isSame(currentDate, date, type)) classes += ' -current-';\n            if (parent.focused && dp.isSame(date, parent.focused, type)) classes += ' -focus-';\n            if (parent._isSelected(date, type)) classes += ' -selected-';\n            if (!parent._isInRange(date, type) || render.disabled) classes += ' -disabled-';\n\n            return {\n                html: html,\n                classes: classes\n            }\n        },\n\n        /**\n         * Calculates days number to render. Generates days html and returns it.\n         * @param {object} date - Date object\n         * @returns {string}\n         * @private\n         */\n        _getDaysHtml: function (date) {\n            var totalMonthDays = dp.getDaysCount(date),\n                firstMonthDay = new Date(date.getFullYear(), date.getMonth(), 1).getDay(),\n                lastMonthDay = new Date(date.getFullYear(), date.getMonth(), totalMonthDays).getDay(),\n                daysFromPevMonth = firstMonthDay - this.d.loc.firstDay,\n                daysFromNextMonth = 6 - lastMonthDay + this.d.loc.firstDay;\n\n            daysFromPevMonth = daysFromPevMonth < 0 ? daysFromPevMonth + 7 : daysFromPevMonth;\n            daysFromNextMonth = daysFromNextMonth > 6 ? daysFromNextMonth - 7 : daysFromNextMonth;\n\n            var startDayIndex = -daysFromPevMonth + 1,\n                m, y,\n                html = '';\n\n            for (var i = startDayIndex, max = totalMonthDays + daysFromNextMonth; i <= max; i++) {\n                y = date.getFullYear();\n                m = date.getMonth();\n\n                html += this._getDayHtml(new Date(y, m, i))\n            }\n\n            return html;\n        },\n\n        _getDayHtml: function (date) {\n           var content = this._getCellContents(date, 'day');\n\n            return '<div class=\"' + content.classes + '\" ' +\n                'data-date=\"' + date.getDate() + '\" ' +\n                'data-month=\"' + date.getMonth() + '\" ' +\n                'data-year=\"' + date.getFullYear() + '\">' + content.html + '</div>';\n        },\n\n        /**\n         * Generates months html\n         * @param {object} date - date instance\n         * @returns {string}\n         * @private\n         */\n        _getMonthsHtml: function (date) {\n            var html = '',\n                d = dp.getParsedDate(date),\n                i = 0;\n\n            while(i < 12) {\n                html += this._getMonthHtml(new Date(d.year, i));\n                i++\n            }\n\n            return html;\n        },\n\n        _getMonthHtml: function (date) {\n            var content = this._getCellContents(date, 'month');\n\n            return '<div class=\"' + content.classes + '\" data-month=\"' + date.getMonth() + '\">' + content.html + '</div>'\n        },\n\n        _getYearsHtml: function (date) {\n            var d = dp.getParsedDate(date),\n                decade = dp.getDecade(date),\n                firstYear = decade[0] - 1,\n                html = '',\n                i = firstYear;\n\n            for (i; i <= decade[1] + 1; i++) {\n                html += this._getYearHtml(new Date(i , 0));\n            }\n\n            return html;\n        },\n\n        _getYearHtml: function (date) {\n            var content = this._getCellContents(date, 'year');\n\n            return '<div class=\"' + content.classes + '\" data-year=\"' + date.getFullYear() + '\">' + content.html + '</div>'\n        },\n\n        _renderTypes: {\n            days: function () {\n                var dayNames = this._getDayNamesHtml(this.d.loc.firstDay),\n                    days = this._getDaysHtml(this.d.currentDate);\n\n                this.$cells.html(days);\n                this.$names.html(dayNames)\n            },\n            months: function () {\n                var html = this._getMonthsHtml(this.d.currentDate);\n\n                this.$cells.html(html)\n            },\n            years: function () {\n                var html = this._getYearsHtml(this.d.currentDate);\n\n                this.$cells.html(html)\n            }\n        },\n\n        _render: function () {\n            if (this.opts.onlyTimepicker) return;\n            this._renderTypes[this.type].bind(this)();\n        },\n\n        _update: function () {\n            var $cells = $('.datepicker--cell', this.$cells),\n                _this = this,\n                classes,\n                $cell,\n                date;\n            $cells.each(function (cell, i) {\n                $cell = $(this);\n                date = _this.d._getDateFromCell($(this));\n                classes = _this._getCellContents(date, _this.d.cellType);\n                $cell.attr('class',classes.classes)\n            });\n        },\n\n        show: function () {\n            if (this.opts.onlyTimepicker) return;\n            this.$el.addClass('active');\n            this.acitve = true;\n        },\n\n        hide: function () {\n            this.$el.removeClass('active');\n            this.active = false;\n        },\n\n        //  Events\n        // -------------------------------------------------\n\n        _handleClick: function (el) {\n            var date = el.data('date') || 1,\n                month = el.data('month') || 0,\n                year = el.data('year') || this.d.parsedDate.year,\n                dp = this.d;\n            // Change view if min view does not reach yet\n            if (dp.view != this.opts.minView) {\n                dp.down(new Date(year, month, date));\n                return;\n            }\n            // Select date if min view is reached\n            var selectedDate = new Date(year, month, date),\n                alreadySelected = this.d._isSelected(selectedDate, this.d.cellType);\n\n            if (!alreadySelected) {\n                dp._trigger('clickCell', selectedDate);\n                return;\n            }\n\n            dp._handleAlreadySelectedDates.bind(dp, alreadySelected, selectedDate)();\n\n        },\n\n        _onClickCell: function (e) {\n            var $el = $(e.target).closest('.datepicker--cell');\n\n            if ($el.hasClass('-disabled-')) return;\n\n            this._handleClick.bind(this)($el);\n        }\n    };\n})();\n\n;(function () {\n    var template = '' +\n        '<div class=\"datepicker--nav-action\" data-action=\"prev\">#{prevHtml}</div>' +\n        '<div class=\"datepicker--nav-title\">#{title}</div>' +\n        '<div class=\"datepicker--nav-action\" data-action=\"next\">#{nextHtml}</div>',\n        buttonsContainerTemplate = '<div class=\"datepicker--buttons\"></div>',\n        button = '<span class=\"datepicker--button\" data-action=\"#{action}\">#{label}</span>',\n        datepicker = $.fn.datepicker,\n        dp = datepicker.Constructor;\n\n    datepicker.Navigation = function (d, opts) {\n        this.d = d;\n        this.opts = opts;\n\n        this.$buttonsContainer = '';\n\n        this.init();\n    };\n\n    datepicker.Navigation.prototype = {\n        init: function () {\n            this._buildBaseHtml();\n            this._bindEvents();\n        },\n\n        _bindEvents: function () {\n            this.d.$nav.on('click', '.datepicker--nav-action', $.proxy(this._onClickNavButton, this));\n            this.d.$nav.on('click', '.datepicker--nav-title', $.proxy(this._onClickNavTitle, this));\n            this.d.$datepicker.on('click', '.datepicker--button', $.proxy(this._onClickNavButton, this));\n        },\n\n        _buildBaseHtml: function () {\n            if (!this.opts.onlyTimepicker) {\n                this._render();\n            }\n            this._addButtonsIfNeed();\n        },\n\n        _addButtonsIfNeed: function () {\n            if (this.opts.todayButton) {\n                this._addButton('today')\n            }\n            if (this.opts.clearButton) {\n                this._addButton('clear')\n            }\n            if (this.opts.submitButton) {\n                this._addButton('submit')\n            }\n        },\n\n        _render: function () {\n            var title = this._getTitle(this.d.currentDate),\n                html = dp.template(template, $.extend({title: title}, this.opts));\n            this.d.$nav.html(html);\n            if (this.d.view == 'years') {\n                $('.datepicker--nav-title', this.d.$nav).addClass('-disabled-');\n            }\n            this.setNavStatus();\n        },\n\n        _getTitle: function (date) {\n            return this.d.formatDate(this.opts.navTitles[this.d.view], date)\n        },\n\n        _addButton: function (type) {\n            if (!this.$buttonsContainer.length) {\n                this._addButtonsContainer();\n            }\n\n            var data = {\n                    action: type,\n                    label: this.d.loc[type]\n                },\n                html = dp.template(button, data);\n\n            if ($('[data-action=' + type + ']', this.$buttonsContainer).length) return;\n            this.$buttonsContainer.append(html);\n        },\n\n        _addButtonsContainer: function () {\n            this.d.$datepicker.append(buttonsContainerTemplate);\n            this.$buttonsContainer = $('.datepicker--buttons', this.d.$datepicker);\n        },\n\n        setNavStatus: function () {\n            if (!(this.opts.minDate || this.opts.maxDate) || !this.opts.disableNavWhenOutOfRange) return;\n\n            var date = this.d.parsedDate,\n                m = date.month,\n                y = date.year,\n                d = date.date;\n\n            switch (this.d.view) {\n                case 'days':\n                    if (!this.d._isInRange(new Date(y, m-1, 1), 'month')) {\n                        this._disableNav('prev')\n                    }\n                    if (!this.d._isInRange(new Date(y, m+1, 1), 'month')) {\n                        this._disableNav('next')\n                    }\n                    break;\n                case 'months':\n                    if (!this.d._isInRange(new Date(y-1, m, d), 'year')) {\n                        this._disableNav('prev')\n                    }\n                    if (!this.d._isInRange(new Date(y+1, m, d), 'year')) {\n                        this._disableNav('next')\n                    }\n                    break;\n                case 'years':\n                    var decade = dp.getDecade(this.d.date);\n                    if (!this.d._isInRange(new Date(decade[0] - 1, 0, 1), 'year')) {\n                        this._disableNav('prev')\n                    }\n                    if (!this.d._isInRange(new Date(decade[1] + 1, 0, 1), 'year')) {\n                        this._disableNav('next')\n                    }\n                    break;\n            }\n        },\n\n        _disableNav: function (nav) {\n            $('[data-action=\"' + nav + '\"]', this.d.$nav).addClass('-disabled-')\n        },\n\n        _activateNav: function (nav) {\n            $('[data-action=\"' + nav + '\"]', this.d.$nav).removeClass('-disabled-')\n        },\n\n        _onClickNavButton: function (e) {\n            var $el = $(e.target).closest('[data-action]'),\n                action = $el.data('action');\n\n            this.d[action]();\n        },\n\n        _onClickNavTitle: function (e) {\n            if ($(e.target).hasClass('-disabled-')) return;\n\n            if (this.d.view == 'days') {\n                return this.d.view = 'months'\n            }\n\n            this.d.view = 'years';\n        }\n    }\n\n})();\n\n;(function () {\n    var template = '<div class=\"datepicker--time\">' +\n        '<div class=\"datepicker--time-current\">' +\n        '   <span class=\"datepicker--time-current-hours\">#{hourVisible}</span>' +\n        '   <span class=\"datepicker--time-current-colon\">:</span>' +\n        '   <span class=\"datepicker--time-current-minutes\">#{minValue}</span>' +\n        '</div>' +\n        '<div class=\"datepicker--time-sliders\">' +\n        '   <div class=\"datepicker--time-row\">' +\n        '      <input type=\"range\" name=\"hours\" value=\"#{hourValue}\" min=\"#{hourMin}\" max=\"#{hourMax}\" step=\"#{hourStep}\"/>' +\n        '   </div>' +\n        '   <div class=\"datepicker--time-row\">' +\n        '      <input type=\"range\" name=\"minutes\" value=\"#{minValue}\" min=\"#{minMin}\" max=\"#{minMax}\" step=\"#{minStep}\"/>' +\n        '   </div>' +\n        '</div>' +\n        '</div>',\n        datepicker = $.fn.datepicker,\n        dp = datepicker.Constructor;\n\n    datepicker.Timepicker = function (inst, opts) {\n        this.d = inst;\n        this.opts = opts;\n\n        this.init();\n    };\n\n    datepicker.Timepicker.prototype = {\n        init: function () {\n            var input = 'input';\n            this._setTime(this.d.date);\n            this._buildHTML();\n\n            if (navigator.userAgent.match(/trident/gi)) {\n                input = 'change';\n            }\n\n            this.d.$el.on('selectDate', this._onSelectDate.bind(this));\n            this.$ranges.on(input, this._onChangeRange.bind(this));\n            this.$ranges.on('mouseup', this._onMouseUpRange.bind(this));\n            this.$ranges.on('mousemove focus ', this._onMouseEnterRange.bind(this));\n            this.$ranges.on('mouseout blur', this._onMouseOutRange.bind(this));\n        },\n\n        _setTime: function (date) {\n            var _date = dp.getParsedDate(date);\n\n            this._handleDate(date);\n            this.hours = _date.hours < this.minHours ? this.minHours : _date.hours;\n            this.minutes = _date.minutes < this.minMinutes ? this.minMinutes : _date.minutes;\n        },\n\n        /**\n         * Sets minHours and minMinutes from date (usually it's a minDate)\n         * Also changes minMinutes if current hours are bigger then @date hours\n         * @param date {Date}\n         * @private\n         */\n        _setMinTimeFromDate: function (date) {\n            this.minHours = date.getHours();\n            this.minMinutes = date.getMinutes();\n\n            // If, for example, min hours are 10, and current hours are 12,\n            // update minMinutes to default value, to be able to choose whole range of values\n            if (this.d.lastSelectedDate) {\n                if (this.d.lastSelectedDate.getHours() > date.getHours()) {\n                    this.minMinutes = this.opts.minMinutes;\n                }\n            }\n        },\n\n        _setMaxTimeFromDate: function (date) {\n            this.maxHours = date.getHours();\n            this.maxMinutes = date.getMinutes();\n\n            if (this.d.lastSelectedDate) {\n                if (this.d.lastSelectedDate.getHours() < date.getHours()) {\n                    this.maxMinutes = this.opts.maxMinutes;\n                }\n            }\n        },\n\n        _setDefaultMinMaxTime: function () {\n            var maxHours = 23,\n                maxMinutes = 59,\n                opts = this.opts;\n\n            this.minHours = opts.minHours < 0 || opts.minHours > maxHours ? 0 : opts.minHours;\n            this.minMinutes = opts.minMinutes < 0 || opts.minMinutes > maxMinutes ? 0 : opts.minMinutes;\n            this.maxHours = opts.maxHours < 0 || opts.maxHours > maxHours ? maxHours : opts.maxHours;\n            this.maxMinutes = opts.maxMinutes < 0 || opts.maxMinutes > maxMinutes ? maxMinutes : opts.maxMinutes;\n        },\n\n        /**\n         * Looks for min/max hours/minutes and if current values\n         * are out of range sets valid values.\n         * @private\n         */\n        _validateHoursMinutes: function (date) {\n            if (this.hours < this.minHours) {\n                this.hours = this.minHours;\n            } else if (this.hours > this.maxHours) {\n                this.hours = this.maxHours;\n            }\n\n            if (this.minutes < this.minMinutes) {\n                this.minutes = this.minMinutes;\n            } else if (this.minutes > this.maxMinutes) {\n                this.minutes = this.maxMinutes;\n            }\n        },\n\n        _buildHTML: function () {\n            var lz = dp.getLeadingZeroNum,\n                data = {\n                    hourMin: this.minHours,\n                    hourMax: lz(this.maxHours),\n                    hourStep: this.opts.hoursStep,\n                    hourValue: this.hours,\n                    hourVisible: lz(this.displayHours),\n                    minMin: this.minMinutes,\n                    minMax: lz(this.maxMinutes),\n                    minStep: this.opts.minutesStep,\n                    minValue: lz(this.minutes)\n                },\n                _template = dp.template(template, data);\n\n            this.$timepicker = $(_template).appendTo(this.d.$datepicker);\n            this.$ranges = $('[type=\"range\"]', this.$timepicker);\n            this.$hours = $('[name=\"hours\"]', this.$timepicker);\n            this.$minutes = $('[name=\"minutes\"]', this.$timepicker);\n            this.$hoursText = $('.datepicker--time-current-hours', this.$timepicker);\n            this.$minutesText = $('.datepicker--time-current-minutes', this.$timepicker);\n\n            if (this.d.ampm) {\n                this.$ampm = $('<span class=\"datepicker--time-current-ampm\">')\n                    .appendTo($('.datepicker--time-current', this.$timepicker))\n                    .html(this.dayPeriod);\n\n                this.$timepicker.addClass('-am-pm-');\n            }\n        },\n\n        _updateCurrentTime: function () {\n            var h =  dp.getLeadingZeroNum(this.displayHours),\n                m = dp.getLeadingZeroNum(this.minutes);\n\n            this.$hoursText.html(h);\n            this.$minutesText.html(m);\n\n            if (this.d.ampm) {\n                this.$ampm.html(this.dayPeriod);\n            }\n        },\n\n        _updateRanges: function () {\n            this.$hours.attr({\n                min: this.minHours,\n                max: this.maxHours\n            }).val(this.hours);\n\n            this.$minutes.attr({\n                min: this.minMinutes,\n                max: this.maxMinutes\n            }).val(this.minutes)\n        },\n\n        /**\n         * Sets minHours, minMinutes etc. from date. If date is not passed, than sets\n         * values from options\n         * @param [date] {object} - Date object, to get values from\n         * @private\n         */\n        _handleDate: function (date) {\n            this._setDefaultMinMaxTime();\n            if (date) {\n                if (dp.isSame(date, this.d.opts.minDate)) {\n                    this._setMinTimeFromDate(this.d.opts.minDate);\n                } else if (dp.isSame(date, this.d.opts.maxDate)) {\n                    this._setMaxTimeFromDate(this.d.opts.maxDate);\n                }\n            }\n\n            this._validateHoursMinutes(date);\n        },\n\n        update: function () {\n            this._updateRanges();\n            this._updateCurrentTime();\n        },\n\n        /**\n         * Calculates valid hour value to display in text input and datepicker's body.\n         * @param date {Date|Number} - date or hours\n         * @param [ampm] {Boolean} - 12 hours mode\n         * @returns {{hours: *, dayPeriod: string}}\n         * @private\n         */\n        _getValidHoursFromDate: function (date, ampm) {\n            var d = date,\n                hours = date;\n\n            if (date instanceof Date) {\n                d = dp.getParsedDate(date);\n                hours = d.hours;\n            }\n\n            var _ampm = ampm || this.d.ampm,\n                dayPeriod = 'am';\n\n            if (_ampm) {\n                switch(true) {\n                    case hours == 0:\n                        hours = 12;\n                        break;\n                    case hours == 12:\n                        dayPeriod = 'pm';\n                        break;\n                    case hours > 11:\n                        hours = hours - 12;\n                        dayPeriod = 'pm';\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            return {\n                hours: hours,\n                dayPeriod: dayPeriod\n            }\n        },\n\n        set hours (val) {\n            this._hours = val;\n\n            var displayHours = this._getValidHoursFromDate(val);\n\n            this.displayHours = displayHours.hours;\n            this.dayPeriod = displayHours.dayPeriod;\n        },\n\n        get hours() {\n            return this._hours;\n        },\n\n        //  Events\n        // -------------------------------------------------\n\n        _onChangeRange: function (e) {\n            var $target = $(e.target),\n                name = $target.attr('name');\n            \n            this.d.timepickerIsActive = true;\n\n            this[name] = $target.val();\n            this._updateCurrentTime();\n            this.d._trigger('timeChange', [this.hours, this.minutes]);\n\n            this._handleDate(this.d.lastSelectedDate);\n            this.update()\n        },\n\n        _onSelectDate: function (e, data) {\n            this._handleDate(data);\n            this.update();\n        },\n\n        _onMouseEnterRange: function (e) {\n            var name = $(e.target).attr('name');\n            $('.datepicker--time-current-' + name, this.$timepicker).addClass('-focus-');\n        },\n\n        _onMouseOutRange: function (e) {\n            var name = $(e.target).attr('name');\n            if (this.d.inFocus) return; // Prevent removing focus when mouse out of range slider\n            $('.datepicker--time-current-' + name, this.$timepicker).removeClass('-focus-');\n        },\n\n        _onMouseUpRange: function (e) {\n            this.d.timepickerIsActive = false;\n        }\n    };\n})();\n })(window, jQuery);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///./js/datepicker.js?");

/***/ }),

/***/ "./js/dropdown.js":
/*!************************!*\
  !*** ./js/dropdown.js ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\n\r\nfunction checkBtn(dropdown, value) {\r\n    let btn = dropdown.find('.button.clean');\r\n    // console.log(btn);\r\n    if(value == 0) {\r\n        btn.css(\"visibility\", \"hidden\");\r\n        dropdown.find('.increment-input').each(function() {\r\n            if(!jquery__WEBPACK_IMPORTED_MODULE_0__(this).children('.increment-input__container').children('.increment-input__minus').hasClass('disabled')) {\r\n                jquery__WEBPACK_IMPORTED_MODULE_0__(this).children('.increment-input__container').children('.increment-input__minus').toggleClass('disabled');\r\n            }\r\n        });\r\n    }\r\n    else btn.css(\"visibility\", \"visible\");\r\n}\r\n\r\nfunction updateInput(dropdown) {\r\n    let str = '';\r\n    let value = 0;\r\n    let input = dropdown.find('.dropdown__title__input');\r\n    let inc = dropdown.find('.increment-input');\r\n\r\n    inc.each( function() {\r\n        let temp = jquery__WEBPACK_IMPORTED_MODULE_0__(this).children('.increment-input__container').children('.increment-input__input').val();\r\n        value += +temp;\r\n        str += temp + ' ' + jquery__WEBPACK_IMPORTED_MODULE_0__(this).children()[0].innerText.toLowerCase() + \"; \";\r\n        \r\n    });\r\n\r\n    checkBtn(dropdown, value);\r\n\r\n    if(dropdown.find('.increment-input__buttons-block').length == 0) {\r\n        input.val(str.slice(0, 20) + '...');\r\n    } else {\r\n        input.val(value + ' гостя');\r\n    }\r\n    \r\n}\r\n\r\n\r\njquery__WEBPACK_IMPORTED_MODULE_0__('.button.clean').on('click', (e) => {\r\n    // console.log( $(e.currentTarget).parents('.dropdown__items').find('.increment-input') );\r\n    jquery__WEBPACK_IMPORTED_MODULE_0__(e.currentTarget).parents('.dropdown__items').find('.increment-input').each( function() {\r\n        jquery__WEBPACK_IMPORTED_MODULE_0__(this).find('.increment-input__input').val( 0 );\r\n    });\r\n    updateInput(jquery__WEBPACK_IMPORTED_MODULE_0__(e.currentTarget).parents('.dropdown'));\r\n});\r\n\r\njquery__WEBPACK_IMPORTED_MODULE_0__(document).on('click', '.increment-input__minus', function () {\r\n    let total = jquery__WEBPACK_IMPORTED_MODULE_0__(this).next();\r\n    console.log(total);\r\n    if (total.val() > 0) {\r\n        total.val(+total.val() - 1);\r\n        if(total.val() == 0) {\r\n            jquery__WEBPACK_IMPORTED_MODULE_0__(this).toggleClass('disabled');\r\n        }\r\n    }\r\n    updateInput(jquery__WEBPACK_IMPORTED_MODULE_0__(this).parents(\".dropdown\"));\r\n});\r\n\r\njquery__WEBPACK_IMPORTED_MODULE_0__(document).on('click', '.increment-input__plus', function () {\r\n    let total = jquery__WEBPACK_IMPORTED_MODULE_0__(this).prev();\r\n    total.val(+total.val() + 1);\r\n\r\n    if(jquery__WEBPACK_IMPORTED_MODULE_0__(this).prev().prev().hasClass('disabled')) {\r\n        jquery__WEBPACK_IMPORTED_MODULE_0__(this).prev().prev().toggleClass('disabled');\r\n    }\r\n\r\n    updateInput(jquery__WEBPACK_IMPORTED_MODULE_0__(this).parents(\".dropdown\"));\r\n});\r\n\r\njquery__WEBPACK_IMPORTED_MODULE_0__('.dropdown__title__submit').on('click', function() {\r\n    jquery__WEBPACK_IMPORTED_MODULE_0__(this).parents('.dropdown').find('.dropdown__items').toggleClass('visible');\r\n});\r\n\r\n\n\n//# sourceURL=webpack:///./js/dropdown.js?");

/***/ }),

/***/ "./js/index.js":
/*!*********************!*\
  !*** ./js/index.js ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _post__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./post */ \"./js/post.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var material_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! material-design-icons */ \"../node_modules/material-design-icons/index.js\");\n/* harmony import */ var material_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(material_design_icons__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _sass_styles_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sass/styles.scss */ \"./sass/styles.scss\");\n/* harmony import */ var _sass_styles_scss__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_sass_styles_scss__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _jquery_maskedinput__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./jquery.maskedinput */ \"./js/jquery.maskedinput.js\");\n/* harmony import */ var _jquery_maskedinput__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_jquery_maskedinput__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _dropdown__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dropdown */ \"./js/dropdown.js\");\n/* harmony import */ var _css_datepicker_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../css/datepicker.css */ \"./css/datepicker.css\");\n/* harmony import */ var _css_datepicker_css__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_css_datepicker_css__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _datepicker__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./datepicker */ \"./js/datepicker.js\");\n/* harmony import */ var _datepicker__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_datepicker__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _css_simplePagination_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../css/simplePagination.css */ \"./css/simplePagination.css\");\n/* harmony import */ var _css_simplePagination_css__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_css_simplePagination_css__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _jquery_simplePagination__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./jquery.simplePagination */ \"./js/jquery.simplePagination.js\");\n/* harmony import */ var _jquery_simplePagination__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_jquery_simplePagination__WEBPACK_IMPORTED_MODULE_9__);\n\r\n// import '../css/styles.css'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst post = new _post__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('Webpack Post Title');\r\n\r\njquery__WEBPACK_IMPORTED_MODULE_1__('#masked').mask(\"99.99.9999\", {placeholder: \"DD.MM.YYYY\" });\r\n\r\n\r\njquery__WEBPACK_IMPORTED_MODULE_1__('.datepicker-here').datepicker({\r\n    dateFormat: 'dd M',\r\n    range: true,\r\n    position: \"bottom left\",\r\n    clearButton: true,\r\n    submitButton: true,\r\n    multipleDatesSeparator: \" - \", \r\n    navTitles: {\r\n        days: 'MM yyyy'\r\n    }\r\n});\r\n\r\n\r\njquery__WEBPACK_IMPORTED_MODULE_1__('.checkbox__item__input').on('click', (e) => {\r\n    // $(e.target).val() == \"done\" ? $(e.target).val(\"\") : $(e.target).val(\"done\");\r\n    jquery__WEBPACK_IMPORTED_MODULE_1__(e.target).toggleClass('checked');\r\n});\r\n\r\n\r\njquery__WEBPACK_IMPORTED_MODULE_1__('.like').on('click', function() {\r\n    \r\n    jquery__WEBPACK_IMPORTED_MODULE_1__(this).children('.like__icon').text() == \"favorite\" ? jquery__WEBPACK_IMPORTED_MODULE_1__(this).children('.like__icon').text(\"favorite_border\") : jquery__WEBPACK_IMPORTED_MODULE_1__(this).children('.like__icon').text(\"favorite\");\r\n    jquery__WEBPACK_IMPORTED_MODULE_1__(this).toggleClass('active'); \r\n\r\n});\r\n\r\njquery__WEBPACK_IMPORTED_MODULE_1__('.button.border').on('click', function() {\r\n    \r\n    // $(this).children('.like__icon').text() == \"favorite\" ? $(this).children('.like__icon').text(\"favorite_border\") : $(this).children('.like__icon').text(\"favorite\");\r\n    jquery__WEBPACK_IMPORTED_MODULE_1__(this).toggleClass('active'); \r\n\r\n});\r\n\r\n\r\njquery__WEBPACK_IMPORTED_MODULE_1__('.paginator').pagination({\r\n    cssStyle: 'light-theme',\r\n    pages: 15,\r\n    displayedPages: 3,\r\n    edges: 1,\r\n    prevText: \"\",\r\n    nextText: \"arrow_forward\"\r\n});\r\n\r\n// console.log( $(document).find('.datepicker--cells.datepicker--cells-days').children() );\r\n\r\nconsole.log(post.string());\n\n//# sourceURL=webpack:///./js/index.js?");

/***/ }),

/***/ "./js/jquery.maskedinput.js":
/*!**********************************!*\
  !*** ./js/jquery.maskedinput.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n    jQuery Masked Input Plugin\n    Copyright (c) 2007 - 2015 Josh Bush (digitalbush.com)\n    Licensed under the MIT license (http://digitalbush.com/projects/masked-input-plugin/#license)\n    Version: 1.4.1\n*/\n!function(factory) {\n     true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\") ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\n}(function($) {\n    var caretTimeoutId, ua = navigator.userAgent, iPhone = /iphone/i.test(ua), chrome = /chrome/i.test(ua), android = /android/i.test(ua);\n    $.mask = {\n        definitions: {\n            \"9\": \"[0-9]\",\n            a: \"[A-Za-z]\",\n            \"*\": \"[A-Za-z0-9]\"\n        },\n        autoclear: !0,\n        dataName: \"rawMaskFn\",\n        placeholder: \"_\"\n    }, $.fn.extend({\n        caret: function(begin, end) {\n            var range;\n            if (0 !== this.length && !this.is(\":hidden\")) return \"number\" == typeof begin ? (end = \"number\" == typeof end ? end : begin, \n            this.each(function() {\n                this.setSelectionRange ? this.setSelectionRange(begin, end) : this.createTextRange && (range = this.createTextRange(), \n                range.collapse(!0), range.moveEnd(\"character\", end), range.moveStart(\"character\", begin), \n                range.select());\n            })) : (this[0].setSelectionRange ? (begin = this[0].selectionStart, end = this[0].selectionEnd) : document.selection && document.selection.createRange && (range = document.selection.createRange(), \n            begin = 0 - range.duplicate().moveStart(\"character\", -1e5), end = begin + range.text.length), \n            {\n                begin: begin,\n                end: end\n            });\n        },\n        unmask: function() {\n            return this.trigger(\"unmask\");\n        },\n        mask: function(mask, settings) {\n            var input, defs, tests, partialPosition, firstNonMaskPos, lastRequiredNonMaskPos, len, oldVal;\n            if (!mask && this.length > 0) {\n                input = $(this[0]);\n                var fn = input.data($.mask.dataName);\n                return fn ? fn() : void 0;\n            }\n            return settings = $.extend({\n                autoclear: $.mask.autoclear,\n                placeholder: $.mask.placeholder,\n                completed: null\n            }, settings), defs = $.mask.definitions, tests = [], partialPosition = len = mask.length, \n            firstNonMaskPos = null, $.each(mask.split(\"\"), function(i, c) {\n                \"?\" == c ? (len--, partialPosition = i) : defs[c] ? (tests.push(new RegExp(defs[c])), \n                null === firstNonMaskPos && (firstNonMaskPos = tests.length - 1), partialPosition > i && (lastRequiredNonMaskPos = tests.length - 1)) : tests.push(null);\n            }), this.trigger(\"unmask\").each(function() {\n                function tryFireCompleted() {\n                    if (settings.completed) {\n                        for (var i = firstNonMaskPos; lastRequiredNonMaskPos >= i; i++) if (tests[i] && buffer[i] === getPlaceholder(i)) return;\n                        settings.completed.call(input);\n                    }\n                }\n                function getPlaceholder(i) {\n                    return settings.placeholder.charAt(i < settings.placeholder.length ? i : 0);\n                }\n                function seekNext(pos) {\n                    for (;++pos < len && !tests[pos]; ) ;\n                    return pos;\n                }\n                function seekPrev(pos) {\n                    for (;--pos >= 0 && !tests[pos]; ) ;\n                    return pos;\n                }\n                function shiftL(begin, end) {\n                    var i, j;\n                    if (!(0 > begin)) {\n                        for (i = begin, j = seekNext(end); len > i; i++) if (tests[i]) {\n                            if (!(len > j && tests[i].test(buffer[j]))) break;\n                            buffer[i] = buffer[j], buffer[j] = getPlaceholder(j), j = seekNext(j);\n                        }\n                        writeBuffer(), input.caret(Math.max(firstNonMaskPos, begin));\n                    }\n                }\n                function shiftR(pos) {\n                    var i, c, j, t;\n                    for (i = pos, c = getPlaceholder(pos); len > i; i++) if (tests[i]) {\n                        if (j = seekNext(i), t = buffer[i], buffer[i] = c, !(len > j && tests[j].test(t))) break;\n                        c = t;\n                    }\n                }\n                function androidInputEvent() {\n                    var curVal = input.val(), pos = input.caret();\n                    if (oldVal && oldVal.length && oldVal.length > curVal.length) {\n                        for (checkVal(!0); pos.begin > 0 && !tests[pos.begin - 1]; ) pos.begin--;\n                        if (0 === pos.begin) for (;pos.begin < firstNonMaskPos && !tests[pos.begin]; ) pos.begin++;\n                        input.caret(pos.begin, pos.begin);\n                    } else {\n                        for (checkVal(!0); pos.begin < len && !tests[pos.begin]; ) pos.begin++;\n                        input.caret(pos.begin, pos.begin);\n                    }\n                    tryFireCompleted();\n                }\n                function blurEvent() {\n                    checkVal(), input.val() != focusText && input.change();\n                }\n                function keydownEvent(e) {\n                    if (!input.prop(\"readonly\")) {\n                        var pos, begin, end, k = e.which || e.keyCode;\n                        oldVal = input.val(), 8 === k || 46 === k || iPhone && 127 === k ? (pos = input.caret(), \n                        begin = pos.begin, end = pos.end, end - begin === 0 && (begin = 46 !== k ? seekPrev(begin) : end = seekNext(begin - 1), \n                        end = 46 === k ? seekNext(end) : end), clearBuffer(begin, end), shiftL(begin, end - 1), \n                        e.preventDefault()) : 13 === k ? blurEvent.call(this, e) : 27 === k && (input.val(focusText), \n                        input.caret(0, checkVal()), e.preventDefault());\n                    }\n                }\n                function keypressEvent(e) {\n                    if (!input.prop(\"readonly\")) {\n                        var p, c, next, k = e.which || e.keyCode, pos = input.caret();\n                        if (!(e.ctrlKey || e.altKey || e.metaKey || 32 > k) && k && 13 !== k) {\n                            if (pos.end - pos.begin !== 0 && (clearBuffer(pos.begin, pos.end), shiftL(pos.begin, pos.end - 1)), \n                            p = seekNext(pos.begin - 1), len > p && (c = String.fromCharCode(k), tests[p].test(c))) {\n                                if (shiftR(p), buffer[p] = c, writeBuffer(), next = seekNext(p), android) {\n                                    var proxy = function() {\n                                        $.proxy($.fn.caret, input, next)();\n                                    };\n                                    setTimeout(proxy, 0);\n                                } else input.caret(next);\n                                pos.begin <= lastRequiredNonMaskPos && tryFireCompleted();\n                            }\n                            e.preventDefault();\n                        }\n                    }\n                }\n                function clearBuffer(start, end) {\n                    var i;\n                    for (i = start; end > i && len > i; i++) tests[i] && (buffer[i] = getPlaceholder(i));\n                }\n                function writeBuffer() {\n                    input.val(buffer.join(\"\"));\n                }\n                function checkVal(allow) {\n                    var i, c, pos, test = input.val(), lastMatch = -1;\n                    for (i = 0, pos = 0; len > i; i++) if (tests[i]) {\n                        for (buffer[i] = getPlaceholder(i); pos++ < test.length; ) if (c = test.charAt(pos - 1), \n                        tests[i].test(c)) {\n                            buffer[i] = c, lastMatch = i;\n                            break;\n                        }\n                        if (pos > test.length) {\n                            clearBuffer(i + 1, len);\n                            break;\n                        }\n                    } else buffer[i] === test.charAt(pos) && pos++, partialPosition > i && (lastMatch = i);\n                    return allow ? writeBuffer() : partialPosition > lastMatch + 1 ? settings.autoclear || buffer.join(\"\") === defaultBuffer ? (input.val() && input.val(\"\"), \n                    clearBuffer(0, len)) : writeBuffer() : (writeBuffer(), input.val(input.val().substring(0, lastMatch + 1))), \n                    partialPosition ? i : firstNonMaskPos;\n                }\n                var input = $(this), buffer = $.map(mask.split(\"\"), function(c, i) {\n                    return \"?\" != c ? defs[c] ? getPlaceholder(i) : c : void 0;\n                }), defaultBuffer = buffer.join(\"\"), focusText = input.val();\n                input.data($.mask.dataName, function() {\n                    return $.map(buffer, function(c, i) {\n                        return tests[i] && c != getPlaceholder(i) ? c : null;\n                    }).join(\"\");\n                }), input.one(\"unmask\", function() {\n                    input.off(\".mask\").removeData($.mask.dataName);\n                }).on(\"focus.mask\", function() {\n                    if (!input.prop(\"readonly\")) {\n                        clearTimeout(caretTimeoutId);\n                        var pos;\n                        focusText = input.val(), pos = checkVal(), caretTimeoutId = setTimeout(function() {\n                            input.get(0) === document.activeElement && (writeBuffer(), pos == mask.replace(\"?\", \"\").length ? input.caret(0, pos) : input.caret(pos));\n                        }, 10);\n                    }\n                }).on(\"blur.mask\", blurEvent).on(\"keydown.mask\", keydownEvent).on(\"keypress.mask\", keypressEvent).on(\"input.mask paste.mask\", function() {\n                    input.prop(\"readonly\") || setTimeout(function() {\n                        var pos = checkVal(!0);\n                        input.caret(pos), tryFireCompleted();\n                    }, 0);\n                }), chrome && android && input.off(\"input.mask\").on(\"input.mask\", androidInputEvent), \n                checkVal();\n            });\n        }\n    });\n});\n\n//# sourceURL=webpack:///./js/jquery.maskedinput.js?");

/***/ }),

/***/ "./js/jquery.simplePagination.js":
/*!***************************************!*\
  !*** ./js/jquery.simplePagination.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(jQuery) {/**\n* simplePagination.js v1.6\n* A simple jQuery pagination plugin.\n* http://flaviusmatis.github.com/simplePagination.js/\n*\n* Copyright 2012, Flavius Matis\n* Released under the MIT license.\n* http://flaviusmatis.github.com/license.html\n*/\n\n(function($){\n\n\tvar methods = {\n\t\tinit: function(options) {\n\t\t\tvar o = $.extend({\n\t\t\t\titems: 1,\n\t\t\t\titemsOnPage: 1,\n\t\t\t\tpages: 0,\n\t\t\t\tdisplayedPages: 5,\n\t\t\t\tedges: 2,\n\t\t\t\tcurrentPage: 0,\n\t\t\t\tuseAnchors: true,\n\t\t\t\threfTextPrefix: '#page-',\n\t\t\t\threfTextSuffix: '',\n\t\t\t\tprevText: 'Prev',\n\t\t\t\tnextText: 'Next',\n\t\t\t\tellipseText: '&hellip;',\n\t\t\t\tellipsePageSet: true,\n\t\t\t\tcssStyle: 'light-theme',\n\t\t\t\tlistStyle: '',\n\t\t\t\tlabelMap: [],\n\t\t\t\tselectOnClick: true,\n\t\t\t\tnextAtFront: false,\n\t\t\t\tinvertPageOrder: false,\n\t\t\t\tuseStartEdge : true,\n\t\t\t\tuseEndEdge : true,\n\t\t\t\tonPageClick: function(pageNumber, event) {\n\t\t\t\t\t// Callback triggered when a page is clicked\n\t\t\t\t\t// Page number is given as an optional parameter\n\t\t\t\t},\n\t\t\t\tonInit: function() {\n\t\t\t\t\t// Callback triggered immediately after initialization\n\t\t\t\t}\n\t\t\t}, options || {});\n\n\t\t\tvar self = this;\n\n\t\t\to.pages = o.pages ? o.pages : Math.ceil(o.items / o.itemsOnPage) ? Math.ceil(o.items / o.itemsOnPage) : 1;\n\t\t\tif (o.currentPage)\n\t\t\t\to.currentPage = o.currentPage - 1;\n\t\t\telse\n\t\t\t\to.currentPage = !o.invertPageOrder ? 0 : o.pages - 1;\n\t\t\to.halfDisplayed = o.displayedPages / 2;\n\n\t\t\tthis.each(function() {\n\t\t\t\tself.addClass(o.cssStyle + ' simple-pagination').data('pagination', o);\n\t\t\t\tmethods._draw.call(self);\n\t\t\t});\n\n\t\t\to.onInit();\n\n\t\t\treturn this;\n\t\t},\n\n\t\tselectPage: function(page) {\n\t\t\tmethods._selectPage.call(this, page - 1);\n\t\t\treturn this;\n\t\t},\n\n\t\tprevPage: function() {\n\t\t\tvar o = this.data('pagination');\n\t\t\tif (!o.invertPageOrder) {\n\t\t\t\tif (o.currentPage > 0) {\n\t\t\t\t\tmethods._selectPage.call(this, o.currentPage - 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (o.currentPage < o.pages - 1) {\n\t\t\t\t\tmethods._selectPage.call(this, o.currentPage + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\n\t\tnextPage: function() {\n\t\t\tvar o = this.data('pagination');\n\t\t\tif (!o.invertPageOrder) {\n\t\t\t\tif (o.currentPage < o.pages - 1) {\n\t\t\t\t\tmethods._selectPage.call(this, o.currentPage + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (o.currentPage > 0) {\n\t\t\t\t\tmethods._selectPage.call(this, o.currentPage - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\n\t\tgetPagesCount: function() {\n\t\t\treturn this.data('pagination').pages;\n\t\t},\n\n\t\tsetPagesCount: function(count) {\n\t\t\tthis.data('pagination').pages = count;\n\t\t},\n\n\t\tgetCurrentPage: function () {\n\t\t\treturn this.data('pagination').currentPage + 1;\n\t\t},\n\n\t\tdestroy: function(){\n\t\t\tthis.empty();\n\t\t\treturn this;\n\t\t},\n\n\t\tdrawPage: function (page) {\n\t\t\tvar o = this.data('pagination');\n\t\t\to.currentPage = page - 1;\n\t\t\tthis.data('pagination', o);\n\t\t\tmethods._draw.call(this);\n\t\t\treturn this;\n\t\t},\n\n\t\tredraw: function(){\n\t\t\tmethods._draw.call(this);\n\t\t\treturn this;\n\t\t},\n\n\t\tdisable: function(){\n\t\t\tvar o = this.data('pagination');\n\t\t\to.disabled = true;\n\t\t\tthis.data('pagination', o);\n\t\t\tmethods._draw.call(this);\n\t\t\treturn this;\n\t\t},\n\n\t\tenable: function(){\n\t\t\tvar o = this.data('pagination');\n\t\t\to.disabled = false;\n\t\t\tthis.data('pagination', o);\n\t\t\tmethods._draw.call(this);\n\t\t\treturn this;\n\t\t},\n\n\t\tupdateItems: function (newItems) {\n\t\t\tvar o = this.data('pagination');\n\t\t\to.items = newItems;\n\t\t\to.pages = methods._getPages(o);\n\t\t\tthis.data('pagination', o);\n\t\t\tmethods._draw.call(this);\n\t\t},\n\n\t\tupdateItemsOnPage: function (itemsOnPage) {\n\t\t\tvar o = this.data('pagination');\n\t\t\to.itemsOnPage = itemsOnPage;\n\t\t\to.pages = methods._getPages(o);\n\t\t\tthis.data('pagination', o);\n\t\t\tmethods._selectPage.call(this, 0);\n\t\t\treturn this;\n\t\t},\n\n\t\tgetItemsOnPage: function() {\n\t\t\treturn this.data('pagination').itemsOnPage;\n\t\t},\n\n\t\t_draw: function() {\n\t\t\tvar\to = this.data('pagination'),\n\t\t\t\tinterval = methods._getInterval(o),\n\t\t\t\ti,\n\t\t\t\ttagName;\n\n\t\t\tmethods.destroy.call(this);\n\n\t\t\ttagName = (typeof this.prop === 'function') ? this.prop('tagName') : this.attr('tagName');\n\n\t\t\tvar $panel = tagName === 'UL' ? this : $('<ul' + (o.listStyle ? ' class=\"' + o.listStyle + '\"' : '') + '></ul>').appendTo(this);\n\n\t\t\t// Generate Prev link\n\t\t\tif (o.prevText) {\n\t\t\t\tmethods._appendItem.call(this, !o.invertPageOrder ? o.currentPage - 1 : o.currentPage + 1, {text: o.prevText, classes: 'prev'});\n\t\t\t}\n\n\t\t\t// Generate Next link (if option set for at front)\n\t\t\tif (o.nextText && o.nextAtFront) {\n\t\t\t\tmethods._appendItem.call(this, !o.invertPageOrder ? o.currentPage + 1 : o.currentPage - 1, {text: o.nextText, classes: 'next'});\n\t\t\t}\n\n\t\t\t// Generate start edges\n\t\t\tif (!o.invertPageOrder) {\n\t\t\t\tif (interval.start > 0 && o.edges > 0) {\n\t\t\t\t\tif(o.useStartEdge) {\n\t\t\t\t\t\tvar end = Math.min(o.edges, interval.start);\n\t\t\t\t\t\tfor (i = 0; i < end; i++) {\n\t\t\t\t\t\t\tmethods._appendItem.call(this, i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (o.edges < interval.start && (interval.start - o.edges != 1)) {\n\t\t\t\t\t\t$panel.append('<li class=\"disabled\"><span class=\"ellipse\">' + o.ellipseText + '</span></li>');\n\t\t\t\t\t} else if (interval.start - o.edges == 1) {\n\t\t\t\t\t\tmethods._appendItem.call(this, o.edges);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (interval.end < o.pages && o.edges > 0) {\n\t\t\t\t\tif(o.useStartEdge) {\n\t\t\t\t\t\tvar begin = Math.max(o.pages - o.edges, interval.end);\n\t\t\t\t\t\tfor (i = o.pages - 1; i >= begin; i--) {\n\t\t\t\t\t\t\tmethods._appendItem.call(this, i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (o.pages - o.edges > interval.end && (o.pages - o.edges - interval.end != 1)) {\n\t\t\t\t\t\t$panel.append('<li class=\"disabled\"><span class=\"ellipse\">' + o.ellipseText + '</span></li>');\n\t\t\t\t\t} else if (o.pages - o.edges - interval.end == 1) {\n\t\t\t\t\t\tmethods._appendItem.call(this, interval.end);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Generate interval links\n\t\t\tif (!o.invertPageOrder) {\n\t\t\t\tfor (i = interval.start; i < interval.end; i++) {\n\t\t\t\t\tmethods._appendItem.call(this, i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (i = interval.end - 1; i >= interval.start; i--) {\n\t\t\t\t\tmethods._appendItem.call(this, i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Generate end edges\n\t\t\tif (!o.invertPageOrder) {\n\t\t\t\tif (interval.end < o.pages && o.edges > 0) {\n\t\t\t\t\tif (o.pages - o.edges > interval.end && (o.pages - o.edges - interval.end != 1)) {\n\t\t\t\t\t\t$panel.append('<li class=\"disabled\"><span class=\"ellipse\">' + o.ellipseText + '</span></li>');\n\t\t\t\t\t} else if (o.pages - o.edges - interval.end == 1) {\n\t\t\t\t\t\tmethods._appendItem.call(this, interval.end);\n\t\t\t\t\t}\n\t\t\t\t\tif(o.useEndEdge) {\n\t\t\t\t\t\tvar begin = Math.max(o.pages - o.edges, interval.end);\n\t\t\t\t\t\tfor (i = begin; i < o.pages; i++) {\n\t\t\t\t\t\t\tmethods._appendItem.call(this, i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (interval.start > 0 && o.edges > 0) {\n\t\t\t\t\tif (o.edges < interval.start && (interval.start - o.edges != 1)) {\n\t\t\t\t\t\t$panel.append('<li class=\"disabled\"><span class=\"ellipse\">' + o.ellipseText + '</span></li>');\n\t\t\t\t\t} else if (interval.start - o.edges == 1) {\n\t\t\t\t\t\tmethods._appendItem.call(this, o.edges);\n\t\t\t\t\t}\n\n\t\t\t\t\tif(o.useEndEdge) {\n\t\t\t\t\t\tvar end = Math.min(o.edges, interval.start);\n\t\t\t\t\t\tfor (i = end - 1; i >= 0; i--) {\n\t\t\t\t\t\t\tmethods._appendItem.call(this, i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Generate Next link (unless option is set for at front)\n\t\t\tif (o.nextText && !o.nextAtFront) {\n\t\t\t\tmethods._appendItem.call(this, !o.invertPageOrder ? o.currentPage + 1 : o.currentPage - 1, {text: o.nextText, classes: 'next'});\n\t\t\t}\n\n\t\t\tif (o.ellipsePageSet && !o.disabled) {\n\t\t\t\tmethods._ellipseClick.call(this, $panel);\n\t\t\t}\n\n\t\t},\n\n\t\t_getPages: function(o) {\n\t\t\tvar pages = Math.ceil(o.items / o.itemsOnPage);\n\t\t\treturn pages || 1;\n\t\t},\n\n\t\t_getInterval: function(o) {\n\t\t\treturn {\n\t\t\t\tstart: Math.ceil(o.currentPage > o.halfDisplayed ? Math.max(Math.min(o.currentPage - o.halfDisplayed, (o.pages - o.displayedPages)), 0) : 0),\n\t\t\t\tend: Math.ceil(o.currentPage > o.halfDisplayed ? Math.min(o.currentPage + o.halfDisplayed, o.pages) : Math.min(o.displayedPages, o.pages))\n\t\t\t};\n\t\t},\n\n\t\t_appendItem: function(pageIndex, opts) {\n\t\t\tvar self = this, options, $link, o = self.data('pagination'), $linkWrapper = $('<li></li>'), $ul = self.find('ul');\n\n\t\t\tpageIndex = pageIndex < 0 ? 0 : (pageIndex < o.pages ? pageIndex : o.pages - 1);\n\n\t\t\toptions = {\n\t\t\t\ttext: pageIndex + 1,\n\t\t\t\tclasses: ''\n\t\t\t};\n\n\t\t\tif (o.labelMap.length && o.labelMap[pageIndex]) {\n\t\t\t\toptions.text = o.labelMap[pageIndex];\n\t\t\t}\n\n\t\t\toptions = $.extend(options, opts || {});\n\n\t\t\tif (pageIndex == o.currentPage || o.disabled) {\n\t\t\t\tif (o.disabled || options.classes === 'prev' || options.classes === 'next') {\n\t\t\t\t\t$linkWrapper.addClass('disabled');\n\t\t\t\t} else {\n\t\t\t\t\t$linkWrapper.addClass('active');\n\t\t\t\t}\n\t\t\t\t$link = $('<span class=\"current\">' + (options.text) + '</span>');\n\t\t\t} else {\n\t\t\t\tif (o.useAnchors) {\n\t\t\t\t\t$link = $('<a href=\"' + o.hrefTextPrefix + (pageIndex + 1) + o.hrefTextSuffix + '\" class=\"page-link\">' + (options.text) + '</a>');\n\t\t\t\t} else {\n\t\t\t\t\t$link = $('<span >' + (options.text) + '</span>');\n\t\t\t\t}\n\t\t\t\t$link.click(function(event){\n\t\t\t\t\treturn methods._selectPage.call(self, pageIndex, event);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (options.classes) {\n\t\t\t\t$link.addClass(options.classes);\n\t\t\t}\n\n\t\t\t$linkWrapper.append($link);\n\n\t\t\tif ($ul.length) {\n\t\t\t\t$ul.append($linkWrapper);\n\t\t\t} else {\n\t\t\t\tself.append($linkWrapper);\n\t\t\t}\n\t\t},\n\n\t\t_selectPage: function(pageIndex, event) {\n\t\t\tvar o = this.data('pagination');\n\t\t\to.currentPage = pageIndex;\n\t\t\tif (o.selectOnClick) {\n\t\t\t\tmethods._draw.call(this);\n\t\t\t}\n\t\t\treturn o.onPageClick(pageIndex + 1, event);\n\t\t},\n\n\n\t\t_ellipseClick: function($panel) {\n\t\t\tvar self = this,\n\t\t\t\to = this.data('pagination'),\n\t\t\t\t$ellip = $panel.find('.ellipse');\n\t\t\t$ellip.addClass('clickable').parent().removeClass('disabled');\n\t\t\t$ellip.click(function(event) {\n\t\t\t\tif (!o.disable) {\n\t\t\t\t\tvar $this = $(this),\n\t\t\t\t\t\tval = (parseInt($this.parent().prev().text(), 10) || 0) + 1;\n\t\t\t\t\t$this\n\t\t\t\t\t\t.html('<input type=\"number\" min=\"1\" max=\"' + o.pages + '\" step=\"1\" value=\"' + val + '\">')\n\t\t\t\t\t\t.find('input')\n\t\t\t\t\t\t.focus()\n\t\t\t\t\t\t.click(function(event) {\n\t\t\t\t\t\t\t// prevent input number arrows from bubbling a click event on $ellip\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.keyup(function(event) {\n\t\t\t\t\t\t\tvar val = $(this).val();\n\t\t\t\t\t\t\tif (event.which === 13 && val !== '') {\n\t\t\t\t\t\t\t\t// enter to accept\n\t\t\t\t\t\t\t\tif ((val>0)&&(val<=o.pages))\n\t\t\t\t\t\t\t\tmethods._selectPage.call(self, val - 1);\n\t\t\t\t\t\t\t} else if (event.which === 27) {\n\t\t\t\t\t\t\t\t// escape to cancel\n\t\t\t\t\t\t\t\t$ellip.empty().html(o.ellipseText);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.bind('blur', function(event) {\n\t\t\t\t\t\t\tvar val = $(this).val();\n\t\t\t\t\t\t\tif (val !== '') {\n\t\t\t\t\t\t\t\tmethods._selectPage.call(self, val - 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$ellip.empty().html(o.ellipseText);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\n\t};\n\n\t$.fn.pagination = function(method) {\n\n\t\t// Method calling logic\n\t\tif (methods[method] && method.charAt(0) != '_') {\n\t\t\treturn methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n\t\t} else if (typeof method === 'object' || !method) {\n\t\t\treturn methods.init.apply(this, arguments);\n\t\t} else {\n\t\t\t$.error('Method ' +  method + ' does not exist on jQuery.pagination');\n\t\t}\n\n\t};\n\n})(jQuery);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///./js/jquery.simplePagination.js?");

/***/ }),

/***/ "./js/post.js":
/*!********************!*\
  !*** ./js/post.js ***!
  \********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Post; });\nclass Post {\r\n    constructor(title) {\r\n        this.title = title;\r\n        this.date = new Date();\r\n    }\r\n\r\n    string () {\r\n        return JSON.stringify({\r\n            title: this.title,\r\n            date: this.date.toJSON()\r\n        });\r\n    }\r\n}\n\n//# sourceURL=webpack:///./js/post.js?");

/***/ }),

/***/ "./sass/styles.scss":
/*!**************************!*\
  !*** ./sass/styles.scss ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./sass/styles.scss?");

/***/ })

/******/ });